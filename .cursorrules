# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing singleton classes in Android, ensure proper initialization before use:
  - Add an explicit init() method that takes a Context parameter
  - Check for null context and use applicationContext to prevent memory leaks
  - Add proper error handling with clear error messages
  - Implement thread-safe getInstance() method with synchronized keyword
  - Add initialization checks before returning instances
  - Use proper logging for debugging initialization issues
- When working with Room database in Android:
  - Add @Ignore annotation to additional constructors to avoid Room warnings
  - Ensure field names in DAO queries match the actual entity field names
  - Use appropriate return types in DAO methods (LiveData<T> vs T)
  - Implement proper type converters for complex types
  - Add proper error handling for database operations
  - When storing complex objects, ensure proper type checking and casting when retrieving data
  - Handle type conversion between Object and specific types like JsonObject with proper instanceof checks
- When implementing Gson converters for Retrofit:
  - Create custom JsonDeserializer for handling complex JSON structures
  - Register type adapters with GsonBuilder for specific types
  - Handle edge cases like null values and different JSON types
  - Use proper error handling for deserialization exceptions
- When working with generic types in Java:
  - Be careful with type inference when using generic methods
  - Use explicit type parameters when inference fails
  - Add proper type checking and casting when working with Object types
  - Handle type conversion between Object and specific types with proper instanceof checks
- When handling JSON data in Android with Gson:
  - Be aware that Gson deserializes JSON objects to LinkedTreeMap by default
  - Always use proper type checking with instanceof before casting
  - Implement conversion methods between LinkedTreeMap and JsonObject
  - Use JsonParser.parseString(json).getAsJsonObject() instead of gson.fromJson() for more reliable conversion
  - Add try-catch blocks around JSON parsing operations to handle malformed data
  - Consider updating entity data with properly converted objects for future use
- When working with Java/Android type comparisons:
  - Always match types in comparisons (don't compare String with int)
  - Use proper type checking before comparing: entity.getId() != null && !entity.getId().isEmpty() instead of entity.getId() > 0
  - Check for null and empty string separately when working with String IDs
  - Add explicit type conversions if comparison between different types is needed (Integer.parseInt())
- When working with lambda expressions in Java:
  - Variables captured in lambda expressions must be final or effectively final
  - Create final copies of variables before passing them to lambdas: final CoinsEntity finalEntity = entity
  - Be careful with mutating captured objects within lambdas
  - Use effectively final variables whenever possible to avoid creating extra copies
- When implementing Android string resources:
  - Always define error messages and other UI text in strings.xml 
  - Use consistent naming convention for string resources
  - Group related strings together with XML comments
  - Add string resources before referencing them in code to avoid R.string not found errors
- When implementing server-side AdMob integration:
  - Use a centralized service for managing ad configurations
  - Implement caching to reduce database load and improve response times
  - Add proper error handling and logging for all ad-related operations
  - Secure ad-related endpoints with authentication middleware
  - Implement rate limiting to prevent abuse
  - Create a lightweight client library for minimal client-side processing
  - Add offline support with local storage for ad configurations
  - Track impressions and clicks server-side for better analytics
  - Implement analytics service for tracking ad performance metrics
  - Set up monitoring service for real-time tracking of ad operations
  - Add alerting for critical issues in the monitoring service
  - Create comprehensive documentation for the integration
  - Implement comprehensive testing for all components
  - Use in-memory MongoDB for testing database operations
  - Mock external dependencies for isolated testing
  - Test edge cases like rate limiting and cache expiration
  - Implement integration tests for authentication middleware
  - Test analytics tracking and monitoring functionality
- When working with Express middleware:
  - Ensure consistent naming of middleware functions across all route files
  - Verify that imported middleware function names match the exported names from the middleware file
  - Use descriptive names that clearly indicate the middleware's purpose (e.g., verifyApiKey, validateRequest)
  - When refactoring middleware, update all route files that use the middleware
  - Consider using middleware factories for configurable middleware
  - Add proper error handling in middleware functions
  - Use next() to pass control to the next middleware in the chain
  - Document middleware functions with JSDoc comments

# Scratchpad

## Current Task: Improve HTML Editing Unlock Dialog and Coin Update Flow

### Issue Analysis

After examining the codebase and previous fixes, there are still issues with the HTML Editing unlock flow, particularly:

1. **Coins Not Updating in UI After Watching Ads**
   - Despite previous fixes, the coin balance UI is not consistently updating after watching ads
   - The update may be happening in the data layer but not propagating to all UI elements

2. **Unlock Remaining Time Display Issues**
   - The "Time Left in Days" display may not be updating correctly after unlocking a feature
   - Users need clear feedback about the duration of their unlock

### Root Cause Analysis

#### 1. Coin Update Issues

- **LiveData Observer Chain**:
  - Possible race conditions between ad completion and LiveData updates
  - LiveData observers might be registered too late or detached prematurely
  - Dialog lifecycle issues affecting observer registration/removal

- **Thread Management Issues**:
  - UI updates not always happening on the main thread
  - Potential delays in thread switching between background operations and UI updates

- **Multiple ViewModel Implementations**:
  - Two different CoinsViewModel implementations causing inconsistent behavior
  - Each implementation may handle refreshing differently

#### 2. Time Remaining Display Issues

- **Time Calculation Logic**:
  - Possible issues in the conversion from milliseconds to days/hours
  - Time calculation may not account for partial days correctly

- **UI Observer Implementation**:
  - Observers for time remaining may not be properly attached or updated
  - UI elements may not be correctly bound to the LiveData

### Implemented Fixes

#### 1. Fixed Compilation Errors

[X] Fixed type mismatch in CoinsRepository: changed String ID comparison from `entity.getId() > 0` to `entity.getId() != null && !entity.getId().isEmpty()`
[X] Added missing string resources in strings.xml: `ad_failed` and `ad_error`
[X] Fixed lambda expression variable capture issue by creating a final copy of the entity object: `final CoinsEntity finalEntity = entity`
[X] Successfully compiled and installed the app

#### 2. Fixed Coin Update Issues

[X] Added robust coin update broadcast mechanism using a dedicated LiveData event
[X] Implemented synchronized coin update notification across ViewModel instances
[X] Added broadcast mechanism to ensure consistent UI updates
[X] Enhanced all refresh methods to use multiple broadcast channels
[X] Improved retry logic with progressive delays for coin update verification

#### 3. Fixed Time Remaining Display Issues

[X] Added improved time formatting logic with proper days/hours/minutes display
[X] Centralized formatting logic in the ViewModel for consistency
[X] Enhanced the UI observer implementation for time remaining display
[X] Added helper methods for consistent time formatting across the app

### Next Steps

#### 1. Testing and Validation

[ ] Test coin updates across all scenarios (watching ads, purchases, etc.)
[ ] Verify time remaining display in different states
[ ] Test with different device configurations and conditions
[ ] Add clearer success/failure messaging
[ ] Improve overall UX of the unlock flow