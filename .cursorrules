# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```bash
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Always check if files exist and their content before making changes
- When implementing Google Sign-In:
  - Check google-services.json for web client ID
  - Use Tasks.forResult() instead of Task.forResult()
  - Handle GoogleSignInAccount properly in callbacks
  - Add proper error handling for cancelled sign-in
  - Add proper initialization checks
  - Use proper dependency versions
  - For non-critical services like MongoDB sync, handle 404 errors gracefully
  - Treat infrastructure errors in non-critical paths as warnings rather than errors

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing Firebase Remote Config for Android:
  - Create wrapper classes for complex JSON structures
  - Use proper Gson annotations (@SerializedName) to map JSON keys to class fields
  - Implement fallback parsing for different JSON structures (direct vs nested)
  - Add proper error handling for JSON parsing with detailed logging
  - Save raw JSON to SharedPreferences for debugging and offline access
  - Add methods to display raw JSON for debugging purposes
  - Implement custom JSON input for testing without Firebase Console changes
  - Add validation for JSON format before saving
  - Use AlertDialog with multiline EditText for custom JSON input
  - Implement proper permission handling for notifications on Android 13+
  - Add test buttons for immediate notification testing
  - Use pretty printing for JSON display in UI
  - Implement proper date handling for event start/end dates
  - Add countdown calculation based on current date
  - Implement notification scheduling with AlarmManager
  - Add BroadcastReceiver for handling scheduled notifications
  - Use PendingIntent.FLAG_IMMUTABLE for Android 12+
  - Create proper notification channels for Android 8+
  - Add deep link support in notifications
- When implementing singleton classes in Android, ensure proper initialization before use:
  - Add an explicit init() method that takes a Context parameter
  - Check for null context and use applicationContext to prevent memory leaks
  - Add proper error handling with clear error messages
  - Implement thread-safe getInstance() method with synchronized keyword
  - Add initialization checks before returning instances
  - Add proper logging for debugging initialization issues
  - Always use getInstance() method to obtain singleton instances, never use direct instantiation with new
  - For classes that only provide getInstance(Context) without separate init(), ensure you're using the correct method
- When implementing Firebase Authentication for backend services:
  - Always set FIREBASE_PROJECT_ID environment variable to resolve "Unable to detect a Project Id" errors
  - Use proper service account credentials (FIREBASE_SERVICE_ACCOUNT) in production
  - Provide a fallback for development environments with SKIP_AUTH=true
  - Add client-side fallback mechanisms to handle 401 authentication errors gracefully
  - Implement local storage for template likes/favorites when authentication fails
  - Add detailed error logging for authentication issues
  - Ensure proper handling of different authentication error codes
  - Create a good user experience by not showing backend authentication errors to users
  - Document Firebase setup procedures in a dedicated README file
  - When implementing token verification in middleware, add proper handling for various error cases
  - Test authentication with both development and production environments
  - Consider security implications when storing tokens and user credentials
- When managing dependencies between singleton classes in Android:
  - Be aware of initialization order between singletons that depend on each other
  - Always initialize security/authentication managers before network/API clients
  - Use a hierarchical initialization approach, starting with core services first
  - Add null checks and proper error handling for dependent services
  - Make service fields non-final if initialization can fail or happen asynchronously
  - Add fallback mechanisms in case dependent services fail to initialize
  - Consider service registration patterns for complex dependency graphs
- When working with LiveData in Android:
  - Always use postValue() instead of setValue() when updating LiveData from background threads
  - LiveData.setValue() can only be called from the main thread, otherwise it throws IllegalStateException: "Cannot invoke setValue on a background thread"
  - Use proper threading practices: AppExecutors or Handlers for background operations
  - When initializing repositories, be careful about threading as constructor code might run on a background thread
  - Look for error messages like "FATAL EXCEPTION: pool-X-thread-Y" and "java.lang.IllegalStateException: Cannot invoke setValue on a background thread" in logcat
  - Be especially careful with code that runs in executors (executors.diskIO().execute(() -> {...}), etc.)
  - Consider using synchronization or thread-safe collections when updating shared data from multiple threads
  - Add proper error handling for LiveData operations to prevent app crashes
  - Consider using postValue() by default for all LiveData updates as a safer approach
  - When debugging thread issues, add Thread.currentThread().getName() to log statements to identify which thread is causing problems
- When working with Room database in Android:
  - Add @Ignore annotation to additional constructors to avoid Room warnings
  - Ensure field names in DAO queries match the actual entity field names
  - Use appropriate return types in DAO methods (LiveData<T> vs T)
  - Implement proper type converters for complex types
  - Add proper error handling for database operations
  - When storing complex objects, ensure proper type checking and casting when retrieving data
  - Handle type conversion between Object and specific types like JsonObject with proper instanceof checks
  - Never perform database operations on the main thread to avoid "IllegalStateException: Cannot access database on the main thread"
  - Always use background threads (AppExecutors.diskIO().execute()) for database operations including insert, update, and delete
  - Remember that Room's getters (queries) returning LiveData are already asynchronous and don't need to be moved to a background thread
  - When fixing database access on main thread issues, be careful to handle exceptions properly in background thread code
- When implementing Gson converters for Retrofit:
  - Create custom JsonDeserializer for handling complex JSON structures
  - Register type adapters with GsonBuilder for specific types
  - Handle edge cases like null values and different JSON types
  - Use proper error handling for deserialization exceptions
- When working with generic types in Java:
  - Be careful with type inference when using generic methods
  - Use explicit type parameters when inference fails
  - Add proper type checking and casting when working with Object types
  - Handle type conversion between Object and specific types with proper instanceof checks
- When handling JSON data in Android with Gson:
  - Be aware that Gson deserializes JSON objects to LinkedTreeMap by default
  - Always use proper type checking with instanceof before casting
  - Implement conversion methods between LinkedTreeMap and JsonObject
  - Use JsonParser.parseString(json).getAsJsonObject() instead of gson.fromJson() for more reliable conversion
  - Add try-catch blocks around JSON parsing operations to handle malformed data
  - Consider updating entity data with properly converted objects for future use
- When working with Java/Android type comparisons:
  - Always match types in comparisons (don't compare String with int)
  - Use proper type checking before comparing: entity.getId() != null && !entity.getId().isEmpty() instead of entity.getId() > 0
  - Check for null and empty string separately when working with String IDs
  - Add explicit type conversions if comparison between different types is needed (Integer.parseInt())
- When working with lambda expressions in Java:
  - Variables captured in lambda expressions must be final or effectively final
  - Create final copies of variables before passing them to lambdas: final CoinsEntity finalEntity = entity
  - Be careful with mutating captured objects within lambdas
  - Use effectively final variables whenever possible to avoid creating extra copies
- When implementing Android string resources:
  - Always define error messages and other UI text in strings.xml 
  - Use consistent naming convention for string resources
  - Group related strings together with XML comments
  - Add string resources before referencing them in code to avoid R.string not found errors
- When working with image loading and caching in Android:
  - Always pass Context to constructors of repositories and adapters that load images
  - Use getApplicationContext() when storing context to avoid memory leaks
  - Implement proper fallback mechanisms for failed image loads
  - Add cache invalidation logic and expiration timeouts
  - Use Glide's RequestOptions for consistent image loading configuration
  - Add proper error handling with RequestListener to catch load failures
  - Log image loading status and failures for easier debugging
  - Maintain a local cache of failed URLs to avoid repeated failures
  - Add explicit placeholder images to prevent UI jumping during loads
  - Implement retry logic with exponential backoff for network requests
  - Consider the cost of toString() on large objects in log statements
  - Add expiration time to memory caches to force refresh periodically
- When implementing Google Sign-In for Android:
  - Create proper method signatures in AuthManager: signInWithGoogle(GoogleSignInAccount) that returns Task<AuthResult>
  - Always handle both success and failure cases with addOnSuccessListener and addOnFailureListener
  - Add proper null checks for account and idToken
  - Include detailed logging for debugging sign-in issues
  - Maintain consistent error handling patterns between related methods
  - Ensure method implementations match the call sites in activities/fragments
  - Consider reusing existing authentication logic (like firebaseAuthWithGoogle) to prevent code duplication
  - Add proper task continuation for handling authentication results
- When implementing server-side AdMob integration:
  - Use a centralized service for managing ad configurations
  - Implement caching to reduce database load and improve response times
  - Add proper error handling and logging for all ad-related operations
  - Secure ad-related endpoints with authentication middleware
  - Implement rate limiting to prevent abuse
  - Create a lightweight client library for minimal client-side processing
  - Add offline support with local storage for ad configurations
  - Track impressions and clicks server-side for better analytics
  - Implement analytics service for tracking ad performance metrics
  - Set up monitoring service for real-time tracking of ad operations
  - Add alerting for critical issues in the monitoring service
  - Create comprehensive documentation for the integration
  - Implement comprehensive testing for all components
  - Use in-memory MongoDB for testing database operations
  - Mock external dependencies for isolated testing
  - Test edge cases like rate limiting and cache expiration
  - Implement integration tests for authentication middleware
  - Test analytics tracking and monitoring functionality
- When working with Express middleware:
  - Ensure consistent naming of middleware functions across all route files
  - Verify that imported middleware function names match the exported names from the middleware file
  - Use descriptive names that clearly indicate the middleware's purpose (e.g., verifyApiKey, validateRequest)
  - When refactoring middleware, update all route files that use the middleware
  - Consider using middleware factories for configurable middleware
  - Add proper error handling in middleware functions
  - Use next() to pass control to the next middleware in the chain
  - Document middleware functions with JSDoc comments
- When implementing Firebase Phone Authentication:
  - Add proper exception handling for FirebaseException in callbacks
  - Ensure variables used in lambda expressions are final or effectively final
  - Use SecureTokenManager for storing sensitive authentication tokens
  - Create a separate UserRepository to manage user authentication state
  - Implement proper token refresh logic in API clients
  - Add debug logging for authentication processes
  - Consider creating a mock server for local testing without Firebase dependencies
  - Save test logs when running automated authentication tests
  - Use different API base URLs for debug and production environments
  - Provide comprehensive technical documentation for the authentication system
- When configuring OkHttp client for Android applications:
  - Use connection pooling to improve connection reuse
  - Enable retryOnConnectionFailure for intermittent network issues
  - Add HTTP response caching to reduce network requests
  - Log detailed connection information in debug builds
  - Set appropriate timeouts for different network conditions
  - Track timing metrics for API calls to identify performance issues
  - Add detailed error logging for failed requests
  - Use interceptors to add common headers across all requests
- When removing AdMob integration from an Android application:
  - Delete all ad-related classes and files (AdMobManager, AdConfig, etc.)
  - Remove Firebase dependencies from build.gradle
  - Update SecureTokenManager and DeviceUtils to maintain API compatibility
  - Remove AdMob-related endpoints from ApiService
  - Keep API key handling methods even after removing ad functionality
  - Clean up imports and initialization code in Application class
  - Remove AdMob-related references from Room database entities and DAOs
  - Modify UI fragments and activities to remove ad containers and references
  - Run clean builds frequently to catch missing files and dependencies
  - Fix possible dependency issues by downgrading to compatible versions like OkHttp 4.9.0 instead of 4.12.0
- When working with Express.js API routes in a Node.js backend:
  - Always properly register route modules in the main server.js or app.js file
  - Use app.use('/api/endpoint', require('./routes/endpoint')) pattern
  - Check for 404 errors in API responses which often indicate missing route registration
  - Ensure route paths in the router match the client-side API calls
  - Add explicit route prefixes in app.use() that match client expectations
  - Validate that middleware is properly imported and applied to routes
  - Add error logging for failed API requests to quickly identify issues
  - Use consistent error response formats across all API endpoints
  - When implementing client-facing APIs, always implement graceful fallbacks on the client side
  - Use SharedPreferences to track API endpoint availability and avoid repeated failed calls
  - Add response code-specific handling (like 404 vs 500) for different error scenarios
  - Ensure data is stored locally when server operations fail to prevent data loss
- When initializing singleton classes in Android:
  - For classes that have both init() and getInstance() static methods, always call init() first
  - Be aware of the error "SecureTokenManager not initialized" which occurs when getInstance() is called before init()
  - Correct initialization sequence is: SecureTokenManager.init(context); then secureTokenManager = SecureTokenManager.getInstance();
  - Never call getInstance().init() as it creates a circular dependency (you need an instance to initialize, but initialization is needed to get the instance)
  - Class implementations should enforce this by throwing an IllegalStateException in getInstance() if init() hasn't been called
  - Be careful of initialization order when singletons depend on each other
  - Add proper error handling and logging during initialization
  - Consider using dependency injection frameworks like Dagger or Hilt to manage singleton lifecycles
  - Add init checks in methods that require initialization to provide helpful error messages
- When handling AdMob ad units in Android:
  - Always check the database for the latest ad unit information before displaying ads
  - Use a "database-first" approach where you try to match server ad units with database entries by ID
  - Add proper null and empty string checks for ad unit IDs and codes
  - Add specific handling for various ad type naming conventions (e.g., "app_open", "AppOpen", "App Open")
  - Include detailed logging of ad unit selection and matching process
  - Provide transparency to users about ad unit sources (database vs. original request)
  - Add robust error handling for when ad units are invalid or missing
  - Consider creating a unified ad unit selection method to reduce code duplication
  - Use thread-safe LiveData observers when accessing database in UI components
- When implementing AdMob interstitial ads in Android:
  - Always verify helper classes are created before using them in fragments
  - Check correct import paths when importing utility classes (like AnalyticsUtils)
  - Use the existing AdConstants class for ad unit IDs instead of hardcoding values
  - Implement proper cleanup in onDestroy to prevent memory leaks
  - Preload ads early in onResume for better user experience
  - Add robust fallbacks when ads aren't loaded or fail to display
  - Always initialize AdMobManager before using other ad-related helpers
- When implementing comprehensive analytics tracking in Android:
  - Create well-defined constant strings for event names and parameter keys
  - Implement centralized tracking utilities to ensure consistent naming and parameters
  - Add detailed device information tracking (model, OS, screen size) using system APIs
  - Track session data with unique identifiers and timestamps
  - Implement debug logging mechanisms that can be toggled for development
  - Add privacy compliance features including user opt-out functionality
  - Add proper error handling and null checks before tracking events
  - Implement global opt-in/opt-out controls that respect user preferences
  - Add screen view tracking for both activities and fragments
  - Use Firebase Analytics setUserProperty for consistent user segmentation
- When implementing Firebase In-App Messaging in Android apps:
  - Add proper dependency management (firebase-inappmessaging-display and ktx variant)
  - Create a singleton handler class with thread-safe initialization pattern
  - Add proper error handling and logging for all Firebase interactions
  - Ensure initialization happens in the correct order in the Application class
  - Test messaging with specific, well-named test events ("test_notification_event")
  - Register custom receivers in AndroidManifest.xml for handling notification interactions
  - Implement multiple notification types (immediate and delayed) for comprehensive testing
  - Ensure all notifications have proper error handling and fallbacks
  - Add detailed logging of notification lifecycle events for debugging
  - Create helper classes to abstract notification scheduling complexity
  - Adapt to Android version differences in the notification scheduling APIs
  - Use Intent extras for passing notification content between components
  - Add proper cleanup in onDestroy to prevent memory leaks
- When implementing proper initialization order in Android applications:
  - Initialize core services first in the Application class
  - Pay attention to dependency order: initialize dependencies before they're needed
  - For DeviceUtils, always call DeviceUtils.init() before getInstance()
  - For API services, initialize ApiClient early in the application lifecycle to avoid "not initialized" errors
  - Initialize Firebase services in a consistent order (Crashlytics → Analytics → Performance → In-App Messaging)
  - For SecurityManager implementations, initialize before any feature that needs encryption
  - Provide helpful error messages that specify the correct initialization order
  - Use try-catch blocks to prevent crashes during initialization
  - Log detailed initialization errors with clear context for debugging
  - Consider using dependency injection frameworks for complex initialization scenarios
  - For Firebase components, ensure proper initialization before usage in services
  - When a class has both init() and getInstance() methods, always call init() first
- When implementing Firebase Crashlytics in Android:
  - Always ensure both plugin and dependency are properly configured:
    - Add 'com.google.firebase:firebase-crashlytics-gradle' to buildscript dependencies in root build.gradle
    - Apply plugin 'com.google.firebase.crashlytics' in app/build.gradle plugins block
    - Add Firebase Crashlytics dependency in app/build.gradle dependencies block
  - Check for error "The Crashlytics build ID is missing" which indicates missing plugin configuration
  - Maintain proper plugin order: apply Android application plugin before Crashlytics plugin
  - Keep Crashlytics initialization early in the app lifecycle but after Firebase initialization
  - Add proper ProGuard/R8 rules if using code obfuscation
  - Test crash reporting in debug builds before releasing
  - Add proper logging before potential crash points
  - Use Crashlytics.log() for adding custom keys and logs before crashes
- When testing Firebase Authentication in Android:
  - Be aware that some operations are restricted to administrators only in production
  - For testing anonymous auth:
    - Enable Anonymous Authentication in Firebase Console
    - Add test security rules in Firebase Console for testing
    - Use emulators for local testing to avoid admin restrictions
    - Add proper test configurations in google-services.json
    - Consider using Firebase Local Emulator Suite for CI/CD
    - Add test-specific security rules for automated tests
    - Handle "operation is restricted to administrators only" errors
    - Use try-catch instead of Tasks.await() for signOut operations
  - For testing in CI/CD:
    - Set up Firebase Test Lab
    - Configure test security rules
    - Use service account credentials
    - Add proper test configurations
- When implementing like/favorite functionality in Android apps:
  - Always ensure UI updates happen on the main thread by using Handler(Looper.getMainLooper())
  - Use postValue() instead of setValue() for LiveData updates from background threads
  - Implement proper debounce mechanisms to prevent multiple rapid clicks (800-1000ms)
  - Add optimistic UI updates with proper error handling and state reversion
  - Use thread-safe collections like ConcurrentHashMap for tracking state
  - Ensure proper synchronization between UI and backend operations
  - Add detailed logging for state changes and errors
  - Implement proper error handling with UI feedback for failed operations
  - Use transactions for atomic database operations to ensure data consistency
  - Add retry mechanisms for failed network operations
  - Consider using a dedicated worker for background retry operations
  - Implement proper cleanup to prevent memory leaks
- When implementing Firebase Remote Config for local push notifications in Android:
  - Create a dedicated model class for the notification config
  - Use SimpleDateFormat with synchronized blocks for thread-safe date parsing
  - Set TimeZone.getTimeZone("UTC") for ISO 8601 date formats
  - Use a singleton manager class for handling remote config fetching and notification display
  - Implement caching with SharedPreferences to reduce network requests
  - Use AlarmManager.setExactAndAllowWhileIdle() for reliable scheduling on newer Android versions
  - Create a proper notification channel for Android O and above
  - Use PendingIntent.FLAG_IMMUTABLE for Android S and above
  - Add proper error handling for malformed config data
  - Implement a daily check mechanism with proper rescheduling
  - Add a BroadcastReceiver to handle boot completed events
  - Use deep links with Intent.ACTION_VIEW for notification actions
  - Add proper debug logging throughout the implementation
  - Create a test activity for manual testing and debugging

# Scratchpad

## Firebase Remote Config for Local Push Notifications Implementation

### Current Status
[X] Basic implementation of EventNotificationManager
[X] Created EventNotificationConfig model
[X] Created RemoteConfigWrapper for JSON structure
[X] Implemented notification scheduling with AlarmManager
[X] Added BroadcastReceiver for handling notifications
[X] Created test activity for debugging
[X] Added permission handling for Android 13+
[X] Added custom JSON configuration for testing
[X] Implemented proper JSON parsing with fallback options

### Next Steps
[ ] Update Firebase Console with proper configuration
[ ] Test with real Firebase Remote Config values
[ ] Add analytics tracking for notification interactions
[ ] Implement notification history tracking
[ ] Add multiple notification support
[ ] Add user preference settings for notifications

### Implementation Details

The implementation includes:

1. Data Models:
   - EventNotificationConfig: Contains event details (title, body, dates, status)
   - RemoteConfigWrapper: Wrapper for nested JSON structure

2. Manager Class:
   - EventNotificationManager: Handles fetching config, scheduling notifications
   - Implements singleton pattern with proper initialization
   - Provides methods for testing and debugging

3. Notification Components:
   - EventNotificationReceiver: BroadcastReceiver for scheduled notifications
   - Proper notification channel creation for Android 8+
   - Deep link support for notification actions

4. Testing Tools:
   - EventNotificationTestActivity: UI for testing notifications
   - Custom JSON input for testing without Firebase Console
   - Immediate notification testing
   - Config display with pretty printing

### Testing Plan
1. [X] Test with default configuration
2. [X] Test with custom JSON configuration
3. [ ] Test with Firebase Console configuration
4. [ ] Test notification scheduling
5. [ ] Test deep links
6. [ ] Test different countdown scenarios

### Firebase Remote Config Structure
```json
{
  "event_push": {
    "title": "Special Event Coming Soon!",
    "body": "Don't miss our special event. Only {{countdown}} left!",
    "status": true,
    "startdate": "2023-06-01T00:00:00Z",
    "enddate": "2023-12-31T23:59:59Z",
    "deeplinksupport": "eventwish://open/event"
  }
}
```

# EventWish App Maintenance Documentation

## Table of Contents
1. [Application Overview](#application-overview)
2. [Architecture](#architecture)
3. [Key Components](#key-components)
4. [Authentication & Security](#authentication--security)
5. [Database Structure](#database-structure)
6. [API Services](#api-services)
7. [Ad Integration](#ad-integration)
8. [Analytics Implementation](#analytics-implementation)
9. [Notifications & Reminders](#notifications--reminders)
10. [Deep Links](#deep-links)
11. [Maintenance Procedures](#maintenance-procedures)
12. [Known Issues](#known-issues)
13. [Build & Deployment](#build--deployment)

## Application Overview

EventWish is an Android application that allows users to create and share event wishes, manage templates, track festivals, and set reminders. The app follows a modern Android architecture with MVVM pattern, Repository pattern, and leverages Room for local database storage.

### Main Features
- Template-based wish creation
- Social media sharing
- Festival tracking and notifications
- Reminder system
- AdMob integration
- Analytics tracking
- Deep linking support

## Architecture

The app follows the MVVM (Model-View-ViewModel) architectural pattern:

- **Model**: Data layer with repositories, data sources, and Room database
- **View**: Activities and Fragments
- **ViewModel**: Manages UI-related data and handles business logic

### Core Components
- `EventWishApplication`: Application class that initializes all core services
- `MainActivity`: Main activity that hosts the navigation component
- Various repositories for data management
- Room database for local storage
- Retrofit for API communication
- WorkManager for background tasks

## Key Components

### Main Modules

1. **UI Module (`com.ds.eventwish.ui`)**
   - Activities and Fragments for different app screens
   - ViewModels that manage UI state
   - Custom views and adapters

2. **Data Module (`com.ds.eventwish.data`)**
   - Repositories that coordinate data access
   - Database entities and DAOs
   - Remote API client and services
   - Local storage utilities

3. **Utility Module (`com.ds.eventwish.utils` and `com.ds.eventwish.util`)**
   - Helper classes for various functionalities
   - Time and date utilities
   - Security and encryption
   - Analytics tracking

4. **Ad Module (`com.ds.eventwish.ads`)**
   - AdMob integration
   - Different ad formats (Interstitial, Native, Rewarded, App Open)
   - Ad unit management

5. **Workers (`com.ds.eventwish.workers`)**
   - Background tasks managed by WorkManager
   - Reminder checks
   - Template updates

6. **Receivers (`com.ds.eventwish.receivers`)**
   - Broadcast receivers for system events
   - Alarm receivers
   - Boot completed receiver

### Navigation

The app uses the Android Navigation Component with a single activity (`MainActivity`) hosting multiple fragments. Navigation is defined in:
- `app/src/main/res/navigation/nav_graph.xml`: Main navigation graph
- `app/src/main/res/navigation/mobile_navigation.xml`: Bottom navigation
- `app/src/main/res/navigation/auth_navigation.xml`: Authentication flow

## Authentication & Security

Authentication is managed through:
- `SecureTokenManager`: Handles secure storage of tokens and sensitive data
- `TokenRepository`: Manages token retrieval and renewal
- `UserRepository`: Handles user registration and authentication

Security considerations:
- API keys are stored securely
- Device IDs are hashed for privacy
- Network calls are secured with HTTPS

## Database Structure

The app uses Room database for local storage. Main entities include:

1. **Template**: Design templates for wishes
2. **Category**: Template categories
3. **Festival**: Holiday and event information
4. **Reminder**: User-set reminders
5. **AdUnit**: Ad configuration data

Database migrations are handled in the `AppDatabase` class. The database version should be incremented when schema changes occur.

## API Services

API communication is handled by Retrofit through:
- `ApiClient`: Configures Retrofit and OkHttp
- `ApiService`: Defines API endpoints

Main API endpoints:
- Template APIs: Fetch and manage templates
- Festival APIs: Retrieve festival information
- Ad unit APIs: Get ad configuration
- User APIs: Registration and authentication

## Ad Integration

The app uses Google AdMob for advertising with multiple ad formats:

1. **App Open Ads**: Shown when the app is opened (`AppOpenManager`)
2. **Interstitial Ads**: Full-screen ads between screens (`InterstitialAdManager`)
3. **Native Ads**: Custom format ads integrated into the UI (`NativeAdHelper`)
4. **Rewarded Ads**: Ads that reward users (`RewardedAdManager`)

Ad configuration is fetched from the server via the `AdMobRepository` and cached locally.

## Analytics Implementation

Analytics tracking is centralized in the `AnalyticsUtils` class, which provides methods for tracking:
- Screen views
- User interactions (clicks, searches)
- Content engagement
- Ad performance
- Error events

Privacy features include:
- User opt-out mechanism
- No collection of personally identifiable information (PII)
- Device information tracking in compliance with Play Store policies

## Notifications & Reminders

The app has a comprehensive notification system:
- `EventWishNotificationManager`: Creates and manages notifications
- `NotificationScheduler`: Schedules notifications at specific times
- `ReminderScheduler`: Handles reminder-specific scheduling

Reminder features:
- User-configurable reminders for events
- Persistent notification for active reminders
- Background checking using WorkManager

## Deep Links

The app supports deep linking to specific content:
- Wishes: `eventwish://wish/{id}`
- Festivals: `eventwish://festival/{id}` 
- Templates: `eventwish://template/{id}`

HTTP(S) deep links:
- `https://eventwishes.onrender.com/wish/{id}`
- `https://eventwishes.onrender.com/festival/{id}`
- `https://eventwishes.onrender.com/template/{id}`

Deep link handling is managed in the `DeepLinkHandler` class.

## Maintenance Procedures

### Regular Maintenance

1. **Update dependencies**:
   - Regularly update dependencies in `build.gradle` files
   - Test thoroughly after updates
   - Pay special attention to Firebase, AdMob, and AndroidX updates

2. **Database migrations**:
   - When changing the database schema, create migration classes
   - Test migrations on devices with existing data
   - Increment the database version number

3. **API changes**:
   - Update ApiService interface with new endpoints
   - Update corresponding repository methods
   - Add appropriate error handling

4. **Ad unit management**:
   - Periodically check ad unit performance
   - Update ad unit IDs in the backend when needed
   - Ensure test ads are used in debug builds

### Troubleshooting

Common issues and solutions:
1. **Network connectivity issues**:
   - Check `ApiClient` configuration
   - Verify `InternetConnectivityChecker` functionality
   - Check certificate pinning configuration

2. **Notification problems**:
   - Verify channel creation in `EventWishApplication`
   - Check Android version-specific notification code
   - Verify alarm permissions on Android 12+

3. **Database errors**:
   - Check migration path for schema changes
   - Verify entity annotations and DAOs
   - Check for thread-safety issues with LiveData

4. **Ad loading issues**:
   - Verify internet connectivity
   - Check ad unit IDs in the database
   - Verify test mode is enabled in debug builds

## Known Issues

1. LiveData updates from background threads should use postValue() instead of setValue()
2. AdMob initialization must complete before using other ad components
3. SecureTokenManager.init() must be called before getInstance()
4. Proper initialization order of singletons is critical for dependency management

## Build & Deployment

### Build Types
- **Debug**: Development version with test ads and verbose logging
- **Release**: Production version with optimizations and release ad units

### Flavor Dimensions
- **Free**: Basic functionality with ads
- **Premium**: Enhanced features without ads

### Signing
- Release builds require signing with the production keystore
- Debug builds use the debug keystore

### Play Store Deployment
1. Update version code and name in `build.gradle`
2. Run `./gradlew bundleRelease`
3. Test the bundle with the Play Store testing tracks
4. Deploy to production through the Play Console

## Conclusion

This documentation provides a comprehensive overview of the EventWish app architecture, components, and maintenance procedures. It should serve as a guide for future developers to understand, maintain, and enhance the application.

## About and Contact Implementation Plan

### Current Status
[X] Server-side implementation complete
- Models (About.js, Contact.js)
- Routes (aboutRoutes.js, contactRoutes.js)
- Server configuration updated

### Android Implementation Plan

#### 1. Examine Existing Structure
[ ] Review current project structure:
  - Check existing fragments and navigation
  - Review current API service implementation
  - Examine existing WebView implementations
  - Check current error handling patterns

#### 2. Data Models (app/src/main/java/com/ds/eventwish/data/model/)
[ ] Create About.java
```java
public class About {
    private String id;
    private String title;
    private String htmlCode;
    private boolean isActive;
    private String createdAt;
    private String updatedAt;
    
    // Constructor
    // Getters and Setters
}
```

[ ] Create Contact.java
```java
public class Contact {
    private String id;
    private String title;
    private String htmlCode;
    private boolean isActive;
    private String createdAt;
    private String updatedAt;
    
    // Constructor
    // Getters and Setters
}
```

#### 3. API Service (app/src/main/java/com/ds/eventwish/data/api/)
[ ] Update ApiService.java
```java
@GET("about")
Call<ApiResponse<About>> getAboutContent();

@GET("contact")
Call<ApiResponse<Contact>> getContactContent();
```

#### 4. Repository Layer
[ ] Create AboutRepository.java
```java
public class AboutRepository {
    private final ApiService apiService;
    private final MutableLiveData<About> aboutContent;
    private final MutableLiveData<Boolean> isLoading;
    private final MutableLiveData<String> error;
    
    // Constructor
    // Methods for fetching and caching about content
}
```

[ ] Create ContactRepository.java
```java
public class ContactRepository {
    private final ApiService apiService;
    private final MutableLiveData<Contact> contactContent;
    private final MutableLiveData<Boolean> isLoading;
    private final MutableLiveData<String> error;
    
    // Constructor
    // Methods for fetching and caching contact content
}
```

#### 5. ViewModels
[ ] Create AboutViewModel.java
```java
public class AboutViewModel extends ViewModel {
    private final AboutRepository repository;
    private final LiveData<About> aboutContent;
    private final LiveData<Boolean> isLoading;
    private final LiveData<String> error;
    
    // Constructor
    // Methods for managing about content state
}
```

[ ] Create ContactViewModel.java
```java
public class ContactViewModel extends ViewModel {
    private final ContactRepository repository;
    private final LiveData<Contact> contactContent;
    private final LiveData<Boolean> isLoading;
    private final LiveData<String> error;
    
    // Constructor
    // Methods for managing contact content state
}
```

#### 6. UI Implementation
[ ] Create fragment_about.xml
```xml
<androidx.constraintlayout.widget.ConstraintLayout>
    <WebView/>
    <ProgressBar/>
    <TextView/> <!-- For error messages -->
    <SwipeRefreshLayout/> <!-- For pull to refresh -->
</androidx.constraintlayout.widget.ConstraintLayout>
```

[ ] Create fragment_contact.xml
```xml
<androidx.constraintlayout.widget.ConstraintLayout>
    <WebView/>
    <ProgressBar/>
    <TextView/> <!-- For error messages -->
    <SwipeRefreshLayout/> <!-- For pull to refresh -->
</androidx.constraintlayout.widget.ConstraintLayout>
```

[ ] Create AboutFragment.java
```java
public class AboutFragment extends Fragment {
    private AboutViewModel viewModel;
    private WebView webView;
    private ProgressBar progressBar;
    private TextView errorView;
    private SwipeRefreshLayout swipeRefresh;
    
    // Lifecycle methods
    // WebView setup
    // Error handling
    // Loading state management
}
```

[ ] Create ContactFragment.java
```java
public class ContactFragment extends Fragment {
    private ContactViewModel viewModel;
    private WebView webView;
    private ProgressBar progressBar;
    private TextView errorView;
    private SwipeRefreshLayout swipeRefresh;
    
    // Lifecycle methods
    // WebView setup
    // Error handling
    // Loading state management
}
```

#### 7. Navigation Setup
[ ] Update nav_graph.xml
```xml
<fragment
    android:id="@+id/aboutFragment"
    android:name="com.ds.eventwish.ui.about.AboutFragment"
    android:label="About" />

<fragment
    android:id="@+id/contactFragment"
    android:name="com.ds.eventwish.ui.contact.ContactFragment"
    android:label="Contact" />
```

[ ] Update MoreFragment.java
```java
// Add click handlers for About and Contact cards
aboutCard.setOnClickListener(v -> {
    Navigation.findNavController(v).navigate(R.id.action_moreFragment_to_aboutFragment);
});

helpCard.setOnClickListener(v -> {
    Navigation.findNavController(v).navigate(R.id.action_moreFragment_to_contactFragment);
});
```

### Implementation Order
1. [ ] Create data models
2. [ ] Update API service
3. [ ] Create repositories
4. [ ] Create ViewModels
5. [ ] Create UI layouts
6. [ ] Implement fragments
7. [ ] Update navigation
8. [ ] Test implementation

### Testing Checklist
1. [ ] Test API integration
   - Verify about content fetching
   - Verify contact content fetching
   - Test error handling
   - Test loading states

2. [ ] Test UI components
   - Verify WebView rendering
   - Test loading indicators
   - Verify error messages
   - Test pull-to-refresh
   - Check navigation

3. [ ] Test offline behavior
   - Verify error handling without network
   - Test cached content display

4. [ ] Integration testing
   - Test navigation flow
   - Verify memory management
   - Check WebView cleanup

### Error Handling
- Network errors
- Invalid HTML content
- WebView loading errors
- Navigation errors
- Memory management

### Performance Considerations
- WebView memory management
- Content caching
- Efficient navigation
- Loading state management

### Next Steps
1. [ ] Start with data models and API service
2. [ ] Implement repositories and ViewModels
3. [ ] Create UI components
4. [ ] Add navigation
5. [ ] Comprehensive testing

### Implementation Details

All implementation details have been completed according to the plan. The app now has:

1. A new "Check for Updates" button in the More screen
2. A red indicator that shows when updates are available
3. The ability to force check for updates by clicking the button
4. Silent update checking to update the indicator status

### Testing Plan
1. Test with no update available:
   - Red indicator should not be visible
   - Clicking "Check for Updates" should show "No update available" message

2. Test with update available:
   - Red indicator should be visible
   - Clicking "Check for Updates" should trigger the update flow

3. Test after app restart:
   - Indicator state should persist based on update availability

### Implementation Timeline
1. [ ] Day 1: Add dependencies and create RemoteConfigManager
2. [ ] Day 2: Update AppUpdateViewModel and create dialog helper
3. [ ] Day 3: Set up Firebase Console and implement analytics
4. [ ] Day 4: Testing and refinement

### Benefits
1. Works in all environments (dev, test, prod)
2. No Play Store dependency for testing
3. Detailed analytics on update behavior
4. Flexible update messages and URLs
5. Support for force updates
6. A/B testing capability for update prompts
7. Remote control of update availability
8. Enhanced user experience with custom dialogs

### Key Metrics to Track
1. Update check rate: % of sessions where update check occurs
2. Update available rate: % of checks where update is available
3. Update prompt impression rate: % of users who see update dialog
4. Update acceptance rate: % of users who accept the update
5. Update deferral rate: % of users who defer the update
6. Update completion rate: % of users who complete the update process
7. Time-to-update: Average time between update availability and acceptance
8. Version distribution: % of users on each app version
9. Force update compliance: % of users who update when forced

## Firebase to MongoDB User Data Migration Plan

### Task Overview
Migrate user data storage from Firebase to MongoDB, ensuring data synchronization between Firebase Auth and MongoDB backend.

### Current System Analysis

#### 1. MongoDB User Schema (`User.js`)
- **Comprehensive Schema**: Already has fields for uid, deviceId, displayName, email, profilePhoto, lastOnline
- **User Preferences**: Includes theme, language, timezone, notification settings
- **Template Interactions**: Tracks favorites, likes, recently used templates
- **Engagement Tracking**: Records user activity with templates and categories
- **Helper Methods**: Includes methods for updating lastOnline, category visits, template interactions

#### 2. Backend API Routes (`users.js`)
- **Authentication Endpoints**:
  - `/users/profile` - Updates user profile after Firebase authentication
  - `/users/register` - Registers new user with Firebase UID
  - `/users/auth` - Handles first-time Firebase authentication
- **User Data Endpoints**:
  - GET `/users/:uid` - Fetches user by Firebase UID or device ID
  - GET `/users/:uid/recommendations` - Gets personalized recommendations
  - PUT `/users/activity` - Updates user's last online timestamp and category visits
- **Template Interaction Endpoints**:
  - PUT/DELETE for likes and favorites
  - GET endpoints for retrieving user's likes, favorites, and recent templates
- **Middleware**: Uses `verifyFirebaseToken` and `validateFirebaseUid` for authentication

#### 3. Android User Model (`User.java`)
- **Core Properties**: uid, phoneNumber, deviceId, displayName, email, profilePhoto
- **User Preferences**: preferredTheme, preferredLanguage, timezone
- **Template Interactions**: favorites, likes, recentTemplatesUsed, lastActiveTemplate
- **Helper Methods**: addFavorite, removeFavorite, addLike, removeLike, recordTemplateView

#### 4. Android API Interface (`ApiService.java`)
- **User Profile Endpoints**:
  - `updateUserProfile` - POST to /users/profile
  - `getUserByUid` - GET from /users/{uid}
  - `authenticateWithFirebase` - POST to /users/auth
- **Template Interaction Endpoints**:
  - Methods for adding/removing likes and favorites
  - Methods for tracking template views and engagement
- **Authentication**: Includes header parameter for Firebase authentication token

### Implementation Plan

#### Phase 1: Backend Verification and Enhancement
- [X] Verify MongoDB User model completeness (already comprehensive)
- [X] Review existing authentication endpoints
  - [X] Ensure `/users/profile` properly handles Firebase Auth data
  - [X] Verify error handling for user creation/update
  - [X] Check backward compatibility with device ID-based lookups
- [X] Enhance data consistency
  - [X] Add validation for required fields
  - [X] Improve error handling and logging
  - [X] Add transaction support for critical operations

#### Phase 2: Android Client Updates
- [X] Create/Update UserRepository class
  - [X] Implement `syncUserWithMongoDB(FirebaseUser user)` method
  - [X] Add caching mechanism for offline access
  - [X] Implement retry logic for network failures
- [X] Update authentication flow
  - [X] Add MongoDB sync after successful Firebase Auth
  - [X] Handle edge cases (network issues, token expiration)
  - [X] Implement proper error handling and user feedback
- [X] Enhance user profile management
  - [X] Add methods for fetching and updating user preferences
  - [X] Implement proper caching strategy
  - [X] Add background synchronization for offline changes

#### Phase 3: Data Migration Strategy
- [X] Implement migration logic in Android client
  - [X] Detect users with Firebase data but no MongoDB entry
  - [X] Sync local data to MongoDB on first login after update
  - [X] Add migration status tracking to prevent duplicate operations
- [X] Add server-side migration support
  - [X] Create admin endpoint for triggering batch migrations
  - [X] Implement data validation and conflict resolution
  - [X] Add detailed logging for migration operations

#### Phase 4: Testing and Verification
- [ ] Test authentication flow
  - [X] New user registration
  - [X] Existing user login with Firebase UID
  - [X] Legacy user login with device ID
  - [ ] Token refresh and expiration handling
- [ ] Test data operations
  - [ ] Profile updates and preferences
  - [ ] Template interactions (likes, favorites, views)
  - [ ] Category tracking and recommendations
- [ ] Test offline capabilities
  - [ ] Offline data access
  - [ ] Data synchronization after reconnection
  - [ ] Conflict resolution

### Implementation Details

#### 1. Backend Enhancements
- **User Authentication Flow**:
  ```
  1. Client authenticates with Firebase
  2. Client sends Firebase UID to server
  3. Server checks if user exists by UID
  4. If exists: update lastOnline and any provided fields
  5. If not exists: create new user with provided data
  6. Return complete user profile
  ```

- **Data Consistency Improvements**:
  - Add validation for required fields (uid at minimum)
  - Implement proper error handling with specific error codes
  - Add detailed logging for debugging and monitoring
  - Use transactions for operations that modify multiple documents

#### 2. Android Client Implementation
- **UserRepository Class**:
  ```java
  public class UserRepository {
      private final ApiService apiService;
      private final MutableLiveData<User> currentUser;
      private final SharedPreferences prefs;
      
      // Constructor
      
      public Task<User> syncUserWithMongoDB(FirebaseUser firebaseUser) {
          // Create request body with Firebase user data
          // Call API to update/create user in MongoDB
          // Handle response and cache user data
          // Return Task with User object
      }
      
      public LiveData<User> getUserProfile(String uid) {
          // Check cache first
          // If not in cache or expired, fetch from API
          // Update cache and return LiveData
      }
      
      public Task<User> updateUserProfile(User user) {
          // Call API to update user profile
          // Update cache on success
          // Return Task with updated User
      }
      
      // Other methods for specific operations
  }
  ```

- **Authentication Flow Updates**:
  ```java
  // In login activity or auth manager
  firebaseAuth.signInWithEmailAndPassword(email, password)
      .addOnSuccessListener(authResult -> {
          FirebaseUser firebaseUser = authResult.getUser();
          if (firebaseUser != null) {
              userRepository.syncUserWithMongoDB(firebaseUser)
                  .addOnSuccessListener(user -> {
                      // Navigate to main activity
                  })
                  .addOnFailureListener(e -> {
                      // Handle MongoDB sync failure
                      // Show error message but allow proceeding if non-critical
                  });
          }
      })
      .addOnFailureListener(e -> {
          // Handle Firebase auth failure
      });
  ```

#### 3. API Endpoints to Use/Update

1. **User Profile Sync**:
   ```
   POST /api/users/profile
   Headers: {
     "Authorization": "Bearer <firebase_token>"
   }
   Body: {
     "uid": "<firebase_uid>",
     "displayName": "<user_name>",
     "email": "<user_email>",
     "profilePhoto": "<photo_url>",
     "deviceId": "<device_id>",  // For backward compatibility
     "lastOnline": <timestamp>
   }
   Response: {
     "success": true,
     "message": "User profile updated",
     "user": {<user_object>}
   }
   ```

2. **Get User Profile**:
   ```
   GET /api/users/{uid}
   Headers: {
     "Authorization": "Bearer <firebase_token>"
   }
   Response: {
     "success": true,
     "user": {<user_object>}
   }
   ```

3. **Update User Preferences**:
   ```
   PUT /api/users/preferences
   Headers: {
     "Authorization": "Bearer <firebase_token>"
   }
   Body: {
     "uid": "<firebase_uid>",
     "preferences": {
       "preferredTheme": "dark",
       "preferredLanguage": "en",
       "timezone": "America/New_York",
       // Other preferences
     }
   }
   Response: {
     "success": true,
     "message": "User preferences updated successfully",
     "user": {<updated_preferences>}
   }
   ```

### Progress Tracking
- [X] Analyze existing code and infrastructure
- [X] Backend verification and enhancement
  - [X] Review authentication endpoints
  - [X] Enhance data consistency
  - [X] Add detailed logging
- [X] Android client updates
  - [X] Create/update UserRepository
  - [X] Update authentication flow
  - [X] Enhance user profile management
- [X] Data migration strategy
  - [X] Implement client-side migration logic
  - [X] Add server-side migration support
- [ ] Testing and verification
  - [X] Test authentication flow
  - [ ] Test data operations
  - [ ] Test offline capabilities

### Next Steps
1. [X] Create/update UserRepository class in Android
2. [X] Implement syncUserWithMongoDB method
3. [X] Update authentication flow to call syncUserWithMongoDB
4. [ ] Complete testing with new and existing users