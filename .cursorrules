# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing singleton classes in Android, ensure proper initialization before use:
  - Add an explicit init() method that takes a Context parameter
  - Check for null context and use applicationContext to prevent memory leaks
  - Add proper error handling with clear error messages
  - Implement thread-safe getInstance() method with synchronized keyword
  - Add initialization checks before returning instances
  - Use proper logging for debugging initialization issues
- When managing dependencies between singleton classes in Android:
  - Be aware of initialization order between singletons that depend on each other
  - Always initialize security/authentication managers before network/API clients
  - Use a hierarchical initialization approach, starting with core services first
  - Add null checks and proper error handling for dependent services
  - Make service fields non-final if initialization can fail or happen asynchronously
  - Add fallback mechanisms in case dependent services fail to initialize
  - Consider service registration patterns for complex dependency graphs
- When working with LiveData in Android:
  - Always use postValue() instead of setValue() when updating LiveData from background threads
  - LiveData.setValue() can only be called from the main thread, otherwise it throws IllegalStateException: "Cannot invoke setValue on a background thread"
  - Use proper threading practices: AppExecutors or Handlers for background operations
  - When initializing repositories, be careful about threading as constructor code might run on a background thread
  - Look for error messages like "FATAL EXCEPTION: pool-X-thread-Y" and "java.lang.IllegalStateException: Cannot invoke setValue on a background thread" in logcat
  - Be especially careful with code that runs in executors (executors.diskIO().execute(() -> {...}), etc.)
  - Consider using synchronization or thread-safe collections when updating shared data from multiple threads
  - Add proper error handling for LiveData operations to prevent app crashes
  - Consider using postValue() by default for all LiveData updates as a safer approach
  - When debugging thread issues, add Thread.currentThread().getName() to log statements to identify which thread is causing problems
- When working with Room database in Android:
  - Add @Ignore annotation to additional constructors to avoid Room warnings
  - Ensure field names in DAO queries match the actual entity field names
  - Use appropriate return types in DAO methods (LiveData<T> vs T)
  - Implement proper type converters for complex types
  - Add proper error handling for database operations
  - When storing complex objects, ensure proper type checking and casting when retrieving data
  - Handle type conversion between Object and specific types like JsonObject with proper instanceof checks
- When implementing Gson converters for Retrofit:
  - Create custom JsonDeserializer for handling complex JSON structures
  - Register type adapters with GsonBuilder for specific types
  - Handle edge cases like null values and different JSON types
  - Use proper error handling for deserialization exceptions
- When working with generic types in Java:
  - Be careful with type inference when using generic methods
  - Use explicit type parameters when inference fails
  - Add proper type checking and casting when working with Object types
  - Handle type conversion between Object and specific types with proper instanceof checks
- When handling JSON data in Android with Gson:
  - Be aware that Gson deserializes JSON objects to LinkedTreeMap by default
  - Always use proper type checking with instanceof before casting
  - Implement conversion methods between LinkedTreeMap and JsonObject
  - Use JsonParser.parseString(json).getAsJsonObject() instead of gson.fromJson() for more reliable conversion
  - Add try-catch blocks around JSON parsing operations to handle malformed data
  - Consider updating entity data with properly converted objects for future use
- When working with Java/Android type comparisons:
  - Always match types in comparisons (don't compare String with int)
  - Use proper type checking before comparing: entity.getId() != null && !entity.getId().isEmpty() instead of entity.getId() > 0
  - Check for null and empty string separately when working with String IDs
  - Add explicit type conversions if comparison between different types is needed (Integer.parseInt())
- When working with lambda expressions in Java:
  - Variables captured in lambda expressions must be final or effectively final
  - Create final copies of variables before passing them to lambdas: final CoinsEntity finalEntity = entity
  - Be careful with mutating captured objects within lambdas
  - Use effectively final variables whenever possible to avoid creating extra copies
- When implementing Android string resources:
  - Always define error messages and other UI text in strings.xml 
  - Use consistent naming convention for string resources
  - Group related strings together with XML comments
  - Add string resources before referencing them in code to avoid R.string not found errors
- When working with image loading and caching in Android:
  - Always pass Context to constructors of repositories and adapters that load images
  - Use getApplicationContext() when storing context to avoid memory leaks
  - Implement proper fallback mechanisms for failed image loads
  - Add cache invalidation logic and expiration timeouts
  - Use Glide's RequestOptions for consistent image loading configuration
  - Add proper error handling with RequestListener to catch load failures
  - Log image loading status and failures for easier debugging
  - Maintain a local cache of failed URLs to avoid repeated failures
  - Add explicit placeholder images to prevent UI jumping during loads
  - Implement retry logic with exponential backoff for network requests
  - Consider the cost of toString() on large objects in log statements
  - Add expiration time to memory caches to force refresh periodically
- When implementing server-side AdMob integration:
  - Use a centralized service for managing ad configurations
  - Implement caching to reduce database load and improve response times
  - Add proper error handling and logging for all ad-related operations
  - Secure ad-related endpoints with authentication middleware
  - Implement rate limiting to prevent abuse
  - Create a lightweight client library for minimal client-side processing
  - Add offline support with local storage for ad configurations
  - Track impressions and clicks server-side for better analytics
  - Implement analytics service for tracking ad performance metrics
  - Set up monitoring service for real-time tracking of ad operations
  - Add alerting for critical issues in the monitoring service
  - Create comprehensive documentation for the integration
  - Implement comprehensive testing for all components
  - Use in-memory MongoDB for testing database operations
  - Mock external dependencies for isolated testing
  - Test edge cases like rate limiting and cache expiration
  - Implement integration tests for authentication middleware
  - Test analytics tracking and monitoring functionality
- When working with Express middleware:
  - Ensure consistent naming of middleware functions across all route files
  - Verify that imported middleware function names match the exported names from the middleware file
  - Use descriptive names that clearly indicate the middleware's purpose (e.g., verifyApiKey, validateRequest)
  - When refactoring middleware, update all route files that use the middleware
  - Consider using middleware factories for configurable middleware
  - Add proper error handling in middleware functions
  - Use next() to pass control to the next middleware in the chain
  - Document middleware functions with JSDoc comments
- When implementing Firebase Phone Authentication:
  - Add proper exception handling for FirebaseException in callbacks
  - Ensure variables used in lambda expressions are final or effectively final
  - Use SecureTokenManager for storing sensitive authentication tokens
  - Create a separate UserRepository to manage user authentication state
  - Implement proper token refresh logic in API clients
  - Add debug logging for authentication processes
  - Consider creating a mock server for local testing without Firebase dependencies
  - Save test logs when running automated authentication tests
  - Use different API base URLs for debug and production environments
  - Provide comprehensive technical documentation for the authentication system
- When configuring OkHttp client for Android applications:
  - Use connection pooling to improve connection reuse
  - Enable retryOnConnectionFailure for intermittent network issues
  - Add HTTP response caching to reduce network requests
  - Log detailed connection information in debug builds
  - Set appropriate timeouts for different network conditions
  - Track timing metrics for API calls to identify performance issues
  - Add detailed error logging for failed requests
  - Use interceptors to add common headers across all requests
- When removing AdMob integration from an Android application:
  - Delete all ad-related classes and files (AdMobManager, AdConfig, etc.)
  - Remove Firebase dependencies from build.gradle
  - Update SecureTokenManager and DeviceUtils to maintain API compatibility
  - Remove AdMob-related endpoints from ApiService
  - Keep API key handling methods even after removing ad functionality
  - Clean up imports and initialization code in Application class
  - Remove AdMob-related references from Room database entities and DAOs
  - Modify UI fragments and activities to remove ad containers and references
  - Run clean builds frequently to catch missing files and dependencies
  - Fix possible dependency issues by downgrading to compatible versions like OkHttp 4.9.0 instead of 4.12.0
- When working with Express.js API routes in a Node.js backend:
  - Always properly register route modules in the main server.js or app.js file
  - Use app.use('/api/endpoint', require('./routes/endpoint')) pattern
  - Check for 404 errors in API responses which often indicate missing route registration
  - Ensure route paths in the router match the client-side API calls
  - Add explicit route prefixes in app.use() that match client expectations
  - Validate that middleware is properly imported and applied to routes
  - Add error logging for failed API requests to quickly identify issues
  - Use consistent error response formats across all API endpoints
  - When implementing client-facing APIs, always implement graceful fallbacks on the client side
  - Use SharedPreferences to track API endpoint availability and avoid repeated failed calls
  - Add response code-specific handling (like 404 vs 500) for different error scenarios
  - Ensure data is stored locally when server operations fail to prevent data loss
- When initializing singleton classes in Android:
  - For classes that have both init() and getInstance() static methods, always call init() first
  - Be aware of the error "SecureTokenManager not initialized" which occurs when getInstance() is called before init()
  - Correct initialization sequence is: SecureTokenManager.init(context); then secureTokenManager = SecureTokenManager.getInstance();
  - Never call getInstance().init() as it creates a circular dependency (you need an instance to initialize, but initialization is needed to get the instance)
  - Class implementations should enforce this by throwing an IllegalStateException in getInstance() if init() hasn't been called
  - Be careful of initialization order when singletons depend on each other
  - Add proper error handling and logging during initialization
  - Consider using dependency injection frameworks like Dagger or Hilt to manage singleton lifecycles
  - Add init checks in methods that require initialization to provide helpful error messages
- When handling AdMob ad units in Android:
  - Always check the database for the latest ad unit information before displaying ads
  - Use a "database-first" approach where you try to match server ad units with database entries by ID
  - Add proper null and empty string checks for ad unit IDs and codes
  - Add specific handling for various ad type naming conventions (e.g., "app_open", "AppOpen", "App Open")
  - Include detailed logging of ad unit selection and matching process
  - Provide transparency to users about ad unit sources (database vs. original request)
  - Add robust error handling for when ad units are invalid or missing
  - Consider creating a unified ad unit selection method to reduce code duplication
  - Use thread-safe LiveData observers when accessing database in UI components
- When implementing AdMob interstitial ads in Android:
  - Always verify helper classes are created before using them in fragments
  - Check correct import paths when importing utility classes (like AnalyticsUtils)
  - Use the existing AdConstants class for ad unit IDs instead of hardcoding values
  - Implement proper cleanup in onDestroy to prevent memory leaks
  - Preload ads early in onResume for better user experience
  - Add robust fallbacks when ads aren't loaded or fail to display
  - Always initialize AdMobManager before using other ad-related helpers

# Scratchpad

## Current Task: Fix Ad Display When API Key is Missing

### Analysis of Logs
1. Initialization Sequence:
   - AdMobRepository initializes successfully
   - InterstitialAdHelper reports "AdMob SDK not initialized" twice
   - AdMob SDK initializes successfully with adapters
   - Ad unit fetch fails due to missing API key
   - Still shows test ads despite API key missing

2. Key Issues:
   - SecureTokenManager not providing API key
   - Falling back to test ads even when API key is missing
   - NullPointerException in recordImpression callback

3. Problem Areas:
   - AdMobManager.getAdUnitId() returns test ad unit even when we should block ads
   - recordImpression() failing due to null callback
   - No proper validation of API key before showing ads

### Implementation Plan
[ ] 1. Update AdMobManager to block ads when API key is missing
   - Modify areAdsEnabled() to check for API key
   - Return null from getAdUnitId() if API key missing
   - Add proper logging for API key status

[ ] 2. Fix recordImpression callback handling
   - Add null check for callback parameter
   - Add default empty callback if none provided
   - Improve error handling

[ ] 3. Update InterstitialAdHelper
   - Add API key validation before loading ads
   - Improve initialization checks
   - Add proper error handling for missing API key

### Technical Details
1. Files to Modify:
   - AdMobManager.java
   - AdMobRepository.java
   - InterstitialAdHelper.java

2. Key Methods:
   - areAdsEnabled()
   - getAdUnitId()
   - recordImpression()
   - initializeAdSdk()

### Progress Tracking
- Current Status: Analyzing issue
- Next Step: Update AdMobManager

# Lessons

## Ad Integration
- Always validate API key before showing ads
- Don't fall back to test ads when API key is missing
- Add proper callback handling for impression tracking
- Check initialization status before loading ads
- Add comprehensive logging for debugging ad issues