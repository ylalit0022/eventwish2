# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing singleton classes in Android, ensure proper initialization before use:
  - Add an explicit init() method that takes a Context parameter
  - Check for null context and use applicationContext to prevent memory leaks
  - Add proper error handling with clear error messages
  - Implement thread-safe getInstance() method with synchronized keyword
  - Add initialization checks before returning instances
  - Use proper logging for debugging initialization issues
- When working with Room database in Android:
  - Add @Ignore annotation to additional constructors to avoid Room warnings
  - Ensure field names in DAO queries match the actual entity field names
  - Use appropriate return types in DAO methods (LiveData<T> vs T)
  - Implement proper type converters for complex types
  - Add proper error handling for database operations
  - When storing complex objects, ensure proper type checking and casting when retrieving data
  - Handle type conversion between Object and specific types like JsonObject with proper instanceof checks
- When implementing Gson converters for Retrofit:
  - Create custom JsonDeserializer for handling complex JSON structures
  - Register type adapters with GsonBuilder for specific types
  - Handle edge cases like null values and different JSON types
  - Use proper error handling for deserialization exceptions
- When working with generic types in Java:
  - Be careful with type inference when using generic methods
  - Use explicit type parameters when inference fails
  - Add proper type checking and casting when working with Object types
  - Handle type conversion between Object and specific types with proper instanceof checks
- When handling JSON data in Android with Gson:
  - Be aware that Gson deserializes JSON objects to LinkedTreeMap by default
  - Always use proper type checking with instanceof before casting
  - Implement conversion methods between LinkedTreeMap and JsonObject
  - Use JsonParser.parseString(json).getAsJsonObject() instead of gson.fromJson() for more reliable conversion
  - Add try-catch blocks around JSON parsing operations to handle malformed data
  - Consider updating entity data with properly converted objects for future use
- When implementing server-side AdMob integration:
  - Use a centralized service for managing ad configurations
  - Implement caching to reduce database load and improve response times
  - Add proper error handling and logging for all ad-related operations
  - Secure ad-related endpoints with authentication middleware
  - Implement rate limiting to prevent abuse
  - Create a lightweight client library for minimal client-side processing
  - Add offline support with local storage for ad configurations
  - Track impressions and clicks server-side for better analytics
  - Implement analytics service for tracking ad performance metrics
  - Set up monitoring service for real-time tracking of ad operations
  - Add alerting for critical issues in the monitoring service
  - Create comprehensive documentation for the integration
  - Implement comprehensive testing for all components
  - Use in-memory MongoDB for testing database operations
  - Mock external dependencies for isolated testing
  - Test edge cases like rate limiting and cache expiration
  - Implement integration tests for authentication middleware
  - Test analytics tracking and monitoring functionality

# Scratchpad

## Current Task: Implement AdMob Integration

### Task Breakdown
[X] Analyze current server-side logic for AdMob integration
[X] Create a component-based plan for implementation
[X] Implement AdMob Configuration Service
[X] Create Ad Serving Controller
[X] Implement Authentication Middleware
[X] Set up Caching Service
[X] Develop minimal client-side components
[X] Implement Analytics Service
[X] Set up Monitoring Service
[X] Add Testing Components
[X] Create Documentation
[X] Implement A/B Testing Capabilities
[X] Implement Ad Targeting Based on User Demographics/Behavior
[X] Enhance Documentation with Troubleshooting Section
[X] Implement Click Fraud Detection
[X] Implement IP and Device Fingerprinting
[X] Create Suspicious Activity Monitoring
[X] Configure Load Balancing for Ad-Related Endpoints
[X] Implement Health Checks for Ad Services
[X] Add Auto-Scaling Policies
[X] Implement Interactive API Explorer with Swagger UI
[X] Add End-to-End Browser Testing with Puppeteer
[X] Implement Performance Benchmarking

### Implementation Progress
- [X] Created component-based plan for AdMob integration
- [X] Implemented AdMob Configuration Service with caching
- [X] Created Ad Serving Controller with endpoints for ad config, impression tracking, and click tracking
- [X] Set up Authentication Middleware with token-based auth, API key validation, and app signature verification
- [X] Implemented Caching Service with memory caching and cache invalidation
- [X] Developed minimal client-side components with offline support and retry logic
- [X] Added example HTML, CSS, and JS files for client integration
- [X] Updated package.json with required dependencies
- [X] Updated .env file with required environment variables
- [X] Added logging with Winston for better monitoring and debugging
- [X] Implemented Analytics Service for tracking impressions, clicks, and revenue
- [X] Set up Monitoring Service with real-time metrics and alerting
- [X] Updated README with comprehensive documentation
- [X] Created unit tests for AdMob model, service, and controller
- [X] Implemented integration tests for authentication middleware
- [X] Added tests for analytics service functionality
- [X] Created tests for monitoring service and metrics tracking
- [X] Implemented tests for caching service operations
- [X] Implemented A/B testing capabilities with model, service, controller, and routes
- [X] Added comprehensive tests for A/B testing functionality
- [X] Updated README with A/B testing documentation
- [X] Implemented user targeting and segmentation capabilities
- [X] Created UserSegment model for managing user segments
- [X] Implemented targeting service for evaluating targeting criteria
- [X] Created segment controller for managing segments
- [X] Added segment routes for segment management
- [X] Updated AdMob model to include targeting criteria
- [X] Enhanced AdMob service to use targeting service for ad selection
- [X] Updated AdMob controller to include more user context data
- [X] Created client examples for targeting capabilities
- [X] Updated README with targeting documentation
- [X] Enhanced troubleshooting section in documentation with detailed information
- [X] Created diagnostic script for checking configuration and connectivity
- [X] Implemented click fraud detection service with multiple detection methods
- [X] Created fraud detection controller and routes
- [X] Integrated fraud detection with ad click tracking
- [X] Updated README with fraud detection documentation
- [X] Implemented IP and device fingerprinting service
- [X] Enhanced fraud detection with fingerprinting capabilities
- [X] Created client-side fingerprinting example
- [X] Updated README with fingerprinting documentation
- [X] Implemented suspicious activity monitoring service
- [X] Created suspicious activity controller and routes
- [X] Integrated suspicious activity monitoring with fraud detection
- [X] Created client-side dashboard for suspicious activity monitoring
- [X] Updated README with suspicious activity monitoring documentation
- [X] Configured load balancing for ad-related endpoints
- [X] Implemented health checks for ad services
- [X] Added auto-scaling policies
- [X] Implemented interactive API Explorer with Swagger UI
- [X] Updated README with load balancing, health checks, and API documentation
- [X] Set up Puppeteer for end-to-end testing
- [X] Created test environment with in-memory MongoDB
- [X] Implemented tests for ad loading, impression tracking, and click tracking
- [X] Added tests for fraud detection system
- [X] Created test client pages for simulating user interactions
- [X] Created benchmarking script for measuring response times and throughput
- [X] Implemented multi-process benchmarking with Node.js cluster
- [X] Added support for different load scenarios (small, medium, large)
- [X] Generated comprehensive performance reports
- [X] Implemented metrics for cache hit rates and database query performance
- [X] Implemented end-to-end tests for fraud detection system
  - [X] Created test client HTML file for fraud detection testing
  - [X] Implemented tests for loading the fraud detection test page
  - [X] Added tests for loading ads and tracking impressions
  - [X] Implemented tests for detecting rapid clicks as suspicious
  - [X] Added tests for detecting pattern clicks as suspicious
  - [X] Implemented tests for detecting clicks from multiple devices
  - [X] Added tests for verifying fraud score updates based on suspicious activities
  - [X] Implemented screenshot capture for visual verification of test results

### Next Steps
1. Implement Advanced Features:
   - [ ] Create video tutorials for complex integrations
2. Enhance Documentation:
   - [ ] Enhance test coverage to 90%+
3. Enhance Fraud Detection System:
   - [ ] Implement machine learning-based fraud detection
   - [ ] Add real-time fraud alerting system
   - [ ] Create fraud prevention dashboard for administrators
   - [ ] Implement automated blocking of suspicious users
   - [ ] Add detailed reporting for fraud patterns

### End-to-End Testing Progress
1. Fraud Detection System Tests:
   - [X] Set up test environment with in-memory MongoDB
   - [X] Created test client HTML file with fraud simulation capabilities
   - [X] Implemented test for loading the fraud detection test page
   - [X] Added test for loading an ad and tracking impression
   - [X] Implemented test for detecting rapid clicks as suspicious
   - [X] Added test for detecting pattern clicks as suspicious
   - [X] Implemented test for detecting clicks from multiple devices
   - [X] Added test for verifying fraud score updates based on suspicious activities
   - [X] Implemented screenshot capture for visual verification

2. Test Client Implementation:
   - [X] Created HTML test client with UI for testing fraud detection
   - [X] Implemented buttons for simulating various fraud scenarios
   - [X] Added logging functionality for tracking test progress
   - [X] Implemented fraud score display and visualization
   - [X] Added API integration for all fraud detection endpoints

3. Test Coverage:
   - [X] Basic ad loading and impression tracking
   - [X] Click fraud detection with rapid clicks
   - [X] Pattern-based click fraud detection
   - [X] Multiple device fraud detection
   - [X] Fraud score calculation and updates
   - [X] Database verification for suspicious activities
   - [X] Visual verification with screenshots

## Previous Task: Fix Runtime ClassCastException in ResourceRepository
[X] Identify the source of ClassCastException
[X] Fix LinkedTreeMap to JsonObject conversion in memory cache
[X] Fix LinkedTreeMap to JsonObject conversion in database retrieval
[X] Add proper type checking and error handling
[X] Build and install the app
[ ] Test the app to verify the fix

## Implementation Progress
1. Fixed LinkedTreeMap to JsonObject conversion:
   - [X] Added proper type checking with instanceof
   - [X] Added conversion from LinkedTreeMap to JsonObject
   - [X] Used JsonParser.parseString() for more reliable conversion
   - [X] Added error handling for conversion failures

2. Improved error handling:
   - [X] Added try-catch blocks around JSON parsing operations
   - [X] Added proper logging for conversion errors
   - [X] Added fallback mechanisms when conversion fails

3. Enhanced caching:
   - [X] Updated entity data with properly converted objects
   - [X] Improved memory cache handling with type checking
   - [X] Added proper error messages for debugging

## Next Steps
1. Test the application:
   - [X] Build the application successfully
   - [X] Install the application on a device
   - [ ] Test basic functionality
   - [ ] Monitor for any runtime errors

2. Consider improvements:
   - [ ] Add more comprehensive error handling
   - [ ] Add logging for debugging
   - [ ] Optimize database operations
   - [ ] Add unit tests for new components
   - [ ] Consider using a more type-safe approach with generics

## Previous Task: Enhance Resource Loading System
[X] Analyze current implementation
[X] Implement proper caching
[X] Add offline support
[X] Improve error handling
[X] Add retry mechanisms
[X] Create UI components for error states
[X] Test implementation
[X] Fix missing methods in NetworkUtils and ErrorHandler
[X] Fix ApiClient initialization issue

## Implementation Progress
1. Created ResourceCache class:
   - [X] Implemented memory caching with LruCache
   - [X] Implemented disk caching with DiskLruCache
   - [X] Added cache size management
   - [X] Added cache invalidation methods
   - [X] Added expiration time management

2. Enhanced NetworkUtils class:
   - [X] Added network state monitoring
   - [X] Added connection type detection
   - [X] Added metered/unmetered connection detection
   - [X] Added LiveData for network state changes
   - [X] Added connection quality estimation
   - [X] Added cache control header generation based on network conditions

3. Enhanced ApiClient:
   - [X] Implemented HTTP caching with OkHttp
   - [X] Added cache control headers based on network type
   - [X] Implemented offline caching
   - [X] Added exponential backoff retry mechanism
   - [X] Added proper error handling
   - [X] Fixed initialization issue with proper singleton pattern
   - [X] Added custom JsonObjectDeserializer for handling complex JSON structures

4. Created Resource model classes:
   - [X] Created Resource wrapper class for loading states
   - [X] Created ResourceType enum for different resource types
   - [X] Added stale data handling
   - [X] Added error message handling

5. Created ResourceRepository:
   - [X] Implemented offline-first approach
   - [X] Added memory, disk, and network caching layers
   - [X] Added ETag support for HTTP caching
   - [X] Added stale data handling
   - [X] Added expiration time management
   - [X] Added background refresh of resources

6. Created Error Handling components:
   - [X] Created ErrorHandler class for centralized error handling
   - [X] Created ErrorDialogFragment for displaying critical errors
   - [X] Added error dialog layout and styles
   - [X] Created error icons for different error types
   - [X] Added error severity levels
   - [X] Added missing handleError method for background operations

7. Created UI components for error states:
   - [X] Created NetworkErrorHandler for standardized network error handling
   - [X] Created OfflineIndicatorView for displaying offline mode
   - [X] Created StaleDataIndicatorView for displaying stale data warnings
   - [X] Added string resources for error messages
   - [X] Added layouts for error indicators
   - [X] Fixed container IDs in indicator views

8. Created Enhanced Repository Implementation:
   - [X] Created EnhancedTemplateRepository as a reference implementation
   - [X] Integrated with ResourceRepository for caching
   - [X] Added offline-first approach
   - [X] Added proper error handling
   - [X] Added background refresh of data
   - [X] Added stale data handling

9. Added Tests:
   - [X] Created ResourceCacheTest for testing caching functionality
   - [X] Created ResourceRepositoryTest for testing repository functionality
   - [X] Added tests for cache hits, cache misses, and expiration
   - [X] Added tests for offline behavior
   - [X] Added tests for network errors
   - [X] Added tests for background refresh

10. Fixed Room Database Issues:
    - [X] Added proper type converters for complex types
    - [X] Fixed DAO interfaces with correct methods and return types
    - [X] Added @Ignore annotations to additional constructors
    - [X] Fixed column name mismatches in queries

## Next Steps
1. Complete integration with existing repositories:
   - [X] Migrate TemplateRepository
   - [X] Migrate CategoryIconRepository
   - [ ] Update dependent UI components

2. Monitor performance and optimize as needed:
   - [ ] Add performance logging
   - [ ] Optimize cache sizes
   - [ ] Tune network timeouts
   - [ ] Improve background operations

## Progress Tracking
[X] Initial analysis complete
[X] Cache implementation
[X] Offline support
[X] Error handling components
[X] Error handling integration
[X] UI components for error states
[X] Enhanced repository implementation
[X] Testing
[X] Fix missing methods
[X] Integration with existing repositories (2/2 completed)
[X] Update UI components to handle new states (1/1 completed)
[X] Fix ApiClient initialization issue
[X] Fix Room database setup
[X] Create missing DAO classes
[X] Add proper type converters
[X] Fix build errors
[X] Install application on device

## Repository Migration Progress
1. TemplateRepository:
   - [X] Updated to use ResourceRepository
   - [X] Added offline-first approach
   - [X] Added proper error handling
   - [X] Added caching with expiration
   - [X] Added stale data handling
   - [X] Maintained backward compatibility

2. CategoryIconRepository:
   - [X] Updated to use ResourceRepository
   - [X] Added offline-first approach
   - [X] Added proper error handling
   - [X] Added caching with expiration
   - [X] Added stale data handling
   - [X] Maintained backward compatibility

## Next Steps for Repository Integration
1. Test the migrated repositories:
   - [ ] Test TemplateRepository with offline mode
   - [ ] Test CategoryIconRepository with offline mode
   - [ ] Verify error handling in both repositories
   - [ ] Check stale data indicators

2. Update UI components to handle new states:
   - [X] Update HomeFragment to show offline indicator
   - [X] Update HomeFragment to show stale data indicator
   - [ ] Update CategoryListFragment to show offline indicator
   - [ ] Update CategoryListFragment to show stale data indicator

## UI Component Updates
1. HomeFragment:
   - [X] Added offline indicator
   - [X] Added stale data indicator
   - [X] Added network state observation
   - [X] Added stale data state observation
   - [X] Added refresh functionality from indicators
   - [X] Added background state tracking for refresh on return

2. HomeViewModel:
   - [X] Added stale data state
   - [X] Added methods to get/set stale data state
   - [X] Updated loadTemplates method to handle stale data
   - [X] Added error message parsing for stale data detection
   - [X] Updated clearCacheAndRefresh to reset stale data state

3. Fixed Build Issues:
   - [X] Added getInstance() method to EventWishApplication
   - [X] Added isNetworkAvailable() method to NetworkUtils
   - [X] Added CATEGORY_ICON constant to ResourceType enum
   - [X] Added RESOURCE_TYPE_CATEGORY_ICON constant to ResourceRepository
   - [X] Added LOW constant to ErrorSeverity enum
   - [X] Added PARSING_ERROR constant to ErrorType enum
   - [X] Added setRetryListener() method to OfflineIndicatorView
   - [X] Added setRefreshListener() method to StaleDataIndicatorView
   - [X] Fixed ApiClient initialization in EventWishApplication
   - [X] Fixed Room database setup with proper DAOs and converters

## ApiClient Improvements
1. Singleton Pattern:
   - [X] Implemented proper singleton pattern for ApiClient
   - [X] Added private constructor to prevent direct instantiation
   - [X] Added synchronized getInstance() method
   - [X] Maintained backward compatibility with static getClient() method
   - [X] Added proper initialization check before usage

2. Error Handling:
   - [X] Added proper error handling for initialization
   - [X] Added context validation before creating client
   - [X] Added logging for initialization and client creation

3. JSON Handling:
   - [X] Added custom JsonObjectDeserializer for handling complex JSON structures
   - [X] Registered type adapter with GsonBuilder for JsonObject
   - [X] Added proper error handling for deserialization exceptions

## Room Database Improvements
1. Type Converters:
   - [X] Added MapTypeConverter for Map<String, String>
   - [X] Added JsonObjectTypeConverter for JsonObject
   - [X] Added proper error handling in converters

2. Entity Classes:
   - [X] Added @Ignore annotations to additional constructors
   - [X] Fixed field names and types
   - [X] Added proper documentation

3. DAO Interfaces:
   - [X] Created missing DAO interfaces
   - [X] Added all required methods
   - [X] Fixed return types to match repository expectations
   - [X] Fixed column name mismatches in queries

## Next Steps for Testing
1. Test the migrated repositories and UI components:
   - [ ] Test HomeFragment with offline mode
   - [ ] Test HomeFragment with stale data
   - [ ] Verify error handling in HomeFragment
   - [ ] Test background refresh functionality
   - [X] Fix build issues

## Previous Task: Test Flashy Message System Implementation
[X] Analyze current implementation
[X] Create Room database implementation
[X] Implement migration from SharedPreferences
[X] Add synchronization
[X] Update UI components
[X] Add error handling
[X] Test implementation
    [X] Unit Tests
        [X] FlashyMessageEntity tests
        [X] FlashyMessageDao tests
        [X] FlashyMessageRepository tests
        [X] FlashyMessageManager tests
    [X] Integration Tests
        [X] Database migration tests
        [X] Repository-Manager integration tests
        [X] UI integration tests
    [X] Instrumentation Tests
        [X] MainActivity flashy message display tests
        [X] FlashyMessageDialog tests

## Progress Update
1. Completed unit tests for:
   - FlashyMessageEntity (data consistency, null handling, state transitions)
   - FlashyMessageDao (CRUD operations, queries, state management)
   - FlashyMessageRepository (data operations, migration, error handling)
   - FlashyMessageManager (utility functions, error handling, null safety)

2. Completed integration tests for:
   - Database migrations (schema verification, version management)
   - Repository-Manager interactions (message flow, state management)
   - Concurrent operations (thread safety, data consistency)
   - Error handling scenarios

3. Completed UI tests for:
   - FlashyMessageDialog (display, interaction, rotation)
   - MainActivity integration (message flow, lifecycle)
   - UI state persistence
   - Animation handling

4. Test coverage achieved:
   - Entity: ~100%
   - DAO: ~95%
   - Repository: ~90%
   - Manager: ~95%
   - Integration: ~85%
   - UI Components: ~80%

## Testing Strategy

1. Unit Tests:
   - Test entity data consistency ✓
   - Test DAO operations ✓
   - Test repository methods ✓
   - Test manager utility functions ✓
   - Test thread handling ✓

2. Integration Tests:
   - Test database migrations ✓
   - Test SharedPreferences to Room migration ✓
   - Test repository-manager interactions ✓
   - Test background thread operations ✓

3. UI/Instrumentation Tests:
   - Test message display flow ✓
   - Test user interactions ✓
   - Test configuration changes ✓
   - Test background/foreground transitions ✓

## Test Coverage Goals:
- Core Business Logic: 90%+ ✓
- Database Operations: 85%+ ✓
- UI Components: 70%+ ✓
- Integration Points: 80%+ ✓

## Next Steps
1. Monitor production usage for:
   - Migration success rates
   - Message display reliability
   - UI responsiveness
   - Error rates

2. Consider improvements:
   - Add analytics for message interaction
   - Implement A/B testing for UI
   - Add performance monitoring
   - Enhance error reporting

## Key Improvements Made
1. **Proper Data Persistence**
   - Replaced SharedPreferences with Room database
   - Added proper entity structure
   - Implemented type safety

2. **Improved Synchronization**
   - Added proper threading with AppExecutors
   - Implemented synchronized singleton pattern
   - Added proper state management

3. **Better Error Handling**
   - Added comprehensive error logging
   - Implemented error callbacks
   - Added null safety checks

4. **Migration Support**
   - Added automatic migration from SharedPreferences
   - Preserved existing messages
   - Added migration logging

## Analysis Notes:

### Critical Issues Found

1. **Flashy Message System Issues**
- Persistence problems with message storage
- JSON parsing errors in FlashyMessageDebugger
- Inconsistent message display after first installation
- SharedPreferences synchronization issues

2. **Resource Loading Problems**
- Template loading failures with poor error handling
- Category icon loading issues on slow connections
- No proper offline fallback for templates
- Network timeout handling needs improvement

3. **Notification System**
- Permission handling issues on Android 13+
- WorkManager initialization problems
- Inconsistent alarm scheduling
- Token management issues in FCM

4. **Memory Management**
- Potential memory leaks in AdManager
- Resource cleanup in fragments
- Image loading optimization needed
- Cache management improvements required

5. **Error Handling**
- Inconsistent error messages
- Missing error recovery strategies
- Poor offline handling
- Incomplete error logging

### Improvement Plan

1. **Immediate Fixes (High Priority)**
- [X] Fix Flashy Message persistence
  - Implement Room database instead of SharedPreferences
  - Add proper synchronization
  - Improve error handling

- [X] Enhance Resource Loading
  - Implement proper caching
  - Add offline support
  - Improve error recovery
  - Add retry mechanisms

- [ ] Notification System Overhaul
  - Fix permission handling
  - Implement proper WorkManager initialization
  - Add robust token management
  - Improve scheduling reliability

2. **Short-term Improvements (Medium Priority)**
- [ ] Memory Optimization
  - Implement proper resource cleanup
  - Add memory leak detection
  - Optimize image loading
  - Improve cache management

- [ ] Error Handling Enhancement
  - Standardize error messages
  - Implement proper error recovery
  - Add comprehensive logging
  - Improve offline support

3. **Long-term Improvements (Low Priority)**
- [ ] Architecture Improvements
  - Move to Kotlin
  - Implement Clean Architecture
  - Add comprehensive testing
  - Improve dependency injection

### Technical Implementation Details

1. **Flashy Message Fix**
```java
// Replace SharedPreferences with Room
@Entity(tableName = "flashy_messages")
public class FlashyMessage {
    @PrimaryKey
    public long id;
    public String message;
    public long timestamp;
    public int priority;
    public boolean isRead;
}

// Add proper synchronization
@Singleton
public class FlashyMessageRepository {
    private final FlashyMessageDao dao;
    private final MutableLiveData<List<FlashyMessage>> messages;
    
    @Inject
    public FlashyMessageRepository(FlashyMessageDao dao) {
        this.dao = dao;
        this.messages = new MutableLiveData<>();
    }
    
    // Add methods for CRUD operations
}
```

2. **Resource Loading Enhancement**
```java
// Implement proper caching
@Singleton
public class ResourceCache {
    private final Cache cache;
    private final DiskLruCache diskCache;
    
    public ResourceCache(Context context) {
        // Initialize caches
    }
    
    // Add cache methods
}

// Add offline support
public class ResourceRepository {
    private final ResourceCache cache;
    private final ApiService apiService;
    private final NetworkUtils networkUtils;
    
    // Add offline-first approach methods
}
```

3. **Notification System Fix**
```java
// Proper WorkManager initialization
@HiltAndroidApp
public class EventWishApplication extends Application implements Configuration.Provider {
    @Override
    public Configuration getWorkManagerConfiguration() {
        return new Configuration.Builder()
            .setMinimumLoggingLevel(android.util.Log.INFO)
            .setWorkerFactory(workerFactory)
            .build();
    }
}

// Enhanced permission handling
public class NotificationPermissionManager {
    public static final String[] REQUIRED_PERMISSIONS = {
        Manifest.permission.POST_NOTIFICATIONS,
        // Add other required permissions
    };
    
    // Add permission handling methods
}
```

### Next Steps
1. Complete testing of UI components with offline and stale data states
2. Add performance monitoring for Resource Loading components
3. Begin work on Notification System overhaul
4. Implement memory optimization strategies
5. Enhance error handling across the application