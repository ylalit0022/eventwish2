# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing singleton classes in Android, ensure proper initialization before use:
  - Add an explicit init() method that takes a Context parameter
  - Check for null context and use applicationContext to prevent memory leaks
  - Add proper error handling with clear error messages
  - Implement thread-safe getInstance() method with synchronized keyword
  - Add initialization checks before returning instances
  - Use proper logging for debugging initialization issues
- When managing dependencies between singleton classes in Android:
  - Be aware of initialization order between singletons that depend on each other
  - Always initialize security/authentication managers before network/API clients
  - Use a hierarchical initialization approach, starting with core services first
  - Add null checks and proper error handling for dependent services
  - Make service fields non-final if initialization can fail or happen asynchronously
  - Add fallback mechanisms in case dependent services fail to initialize
  - Consider service registration patterns for complex dependency graphs
- When working with LiveData in Android:
  - Always use postValue() instead of setValue() when updating LiveData from background threads
  - LiveData.setValue() can only be called from the main thread, otherwise it throws IllegalStateException
  - Use proper threading practices: AppExecutors or Handlers for background operations
  - Consider using observeForever() with proper cleanup for background workers that need LiveData updates
  - Add thread safety checks before LiveData operations in repository classes
  - Be cautious when initializing repositories with LiveData in Application.onCreate()
  - Use SingleLiveEvent for one-time events to avoid LiveData redelivery on configuration changes
- When working with Room database in Android:
  - Add @Ignore annotation to additional constructors to avoid Room warnings
  - Ensure field names in DAO queries match the actual entity field names
  - Use appropriate return types in DAO methods (LiveData<T> vs T)
  - Implement proper type converters for complex types
  - Add proper error handling for database operations
  - When storing complex objects, ensure proper type checking and casting when retrieving data
  - Handle type conversion between Object and specific types like JsonObject with proper instanceof checks
- When implementing Gson converters for Retrofit:
  - Create custom JsonDeserializer for handling complex JSON structures
  - Register type adapters with GsonBuilder for specific types
  - Handle edge cases like null values and different JSON types
  - Use proper error handling for deserialization exceptions
- When working with generic types in Java:
  - Be careful with type inference when using generic methods
  - Use explicit type parameters when inference fails
  - Add proper type checking and casting when working with Object types
  - Handle type conversion between Object and specific types with proper instanceof checks
- When handling JSON data in Android with Gson:
  - Be aware that Gson deserializes JSON objects to LinkedTreeMap by default
  - Always use proper type checking with instanceof before casting
  - Implement conversion methods between LinkedTreeMap and JsonObject
  - Use JsonParser.parseString(json).getAsJsonObject() instead of gson.fromJson() for more reliable conversion
  - Add try-catch blocks around JSON parsing operations to handle malformed data
  - Consider updating entity data with properly converted objects for future use
- When working with Java/Android type comparisons:
  - Always match types in comparisons (don't compare String with int)
  - Use proper type checking before comparing: entity.getId() != null && !entity.getId().isEmpty() instead of entity.getId() > 0
  - Check for null and empty string separately when working with String IDs
  - Add explicit type conversions if comparison between different types is needed (Integer.parseInt())
- When working with lambda expressions in Java:
  - Variables captured in lambda expressions must be final or effectively final
  - Create final copies of variables before passing them to lambdas: final CoinsEntity finalEntity = entity
  - Be careful with mutating captured objects within lambdas
  - Use effectively final variables whenever possible to avoid creating extra copies
- When implementing Android string resources:
  - Always define error messages and other UI text in strings.xml 
  - Use consistent naming convention for string resources
  - Group related strings together with XML comments
  - Add string resources before referencing them in code to avoid R.string not found errors
- When working with image loading and caching in Android:
  - Always pass Context to constructors of repositories and adapters that load images
  - Use getApplicationContext() when storing context to avoid memory leaks
  - Implement proper fallback mechanisms for failed image loads
  - Add cache invalidation logic and expiration timeouts
  - Use Glide's RequestOptions for consistent image loading configuration
  - Add proper error handling with RequestListener to catch load failures
  - Log image loading status and failures for easier debugging
  - Maintain a local cache of failed URLs to avoid repeated failures
  - Add explicit placeholder images to prevent UI jumping during loads
  - Implement retry logic with exponential backoff for network requests
  - Consider the cost of toString() on large objects in log statements
  - Add expiration time to memory caches to force refresh periodically
- When implementing server-side AdMob integration:
  - Use a centralized service for managing ad configurations
  - Implement caching to reduce database load and improve response times
  - Add proper error handling and logging for all ad-related operations
  - Secure ad-related endpoints with authentication middleware
  - Implement rate limiting to prevent abuse
  - Create a lightweight client library for minimal client-side processing
  - Add offline support with local storage for ad configurations
  - Track impressions and clicks server-side for better analytics
  - Implement analytics service for tracking ad performance metrics
  - Set up monitoring service for real-time tracking of ad operations
  - Add alerting for critical issues in the monitoring service
  - Create comprehensive documentation for the integration
  - Implement comprehensive testing for all components
  - Use in-memory MongoDB for testing database operations
  - Mock external dependencies for isolated testing
  - Test edge cases like rate limiting and cache expiration
  - Implement integration tests for authentication middleware
  - Test analytics tracking and monitoring functionality
- When working with Express middleware:
  - Ensure consistent naming of middleware functions across all route files
  - Verify that imported middleware function names match the exported names from the middleware file
  - Use descriptive names that clearly indicate the middleware's purpose (e.g., verifyApiKey, validateRequest)
  - When refactoring middleware, update all route files that use the middleware
  - Consider using middleware factories for configurable middleware
  - Add proper error handling in middleware functions
  - Use next() to pass control to the next middleware in the chain
  - Document middleware functions with JSDoc comments
- When implementing Firebase Phone Authentication:
  - Add proper exception handling for FirebaseException in callbacks
  - Ensure variables used in lambda expressions are final or effectively final
  - Use SecureTokenManager for storing sensitive authentication tokens
  - Create a separate UserRepository to manage user authentication state
  - Implement proper token refresh logic in API clients
  - Add debug logging for authentication processes
  - Consider creating a mock server for local testing without Firebase dependencies
  - Save test logs when running automated authentication tests
  - Use different API base URLs for debug and production environments
  - Provide comprehensive technical documentation for the authentication system
- When configuring OkHttp client for Android applications:
  - Use connection pooling to improve connection reuse
  - Enable retryOnConnectionFailure for intermittent network issues
  - Add HTTP response caching to reduce network requests
  - Log detailed connection information in debug builds
  - Set appropriate timeouts for different network conditions
  - Track timing metrics for API calls to identify performance issues
  - Add detailed error logging for failed requests
  - Use interceptors to add common headers across all requests
- When removing AdMob integration from an Android application:
  - Delete all ad-related classes and files (AdMobManager, AdConfig, etc.)
  - Remove Firebase dependencies from build.gradle
  - Update SecureTokenManager and DeviceUtils to maintain API compatibility
  - Remove AdMob-related endpoints from ApiService
  - Keep API key handling methods even after removing ad functionality
  - Clean up imports and initialization code in Application class
  - Remove AdMob-related references from Room database entities and DAOs
  - Modify UI fragments and activities to remove ad containers and references
  - Run clean builds frequently to catch missing files and dependencies
  - Fix possible dependency issues by downgrading to compatible versions like OkHttp 4.9.0 instead of 4.12.0
- When implementing Express.js API routes in a Node.js backend:
  - Always properly register route modules in the main server.js or app.js file
  - Use app.use('/api/endpoint', require('./routes/endpoint')) pattern
  - Check for 404 errors in API responses which often indicate missing route registration
  - Ensure route paths in the router match the client-side API calls
  - Add explicit route prefixes in app.use() that match client expectations
  - Validate that middleware is properly imported and applied to routes
  - Add error logging for failed API requests to quickly identify issues
  - Use consistent error response formats across all API endpoints
  - When implementing client-facing APIs, always implement graceful fallbacks on the client side
  - Use SharedPreferences to track API endpoint availability and avoid repeated failed calls
  - Add response code-specific handling (like 404 vs 500) for different error scenarios
  - Ensure data is stored locally when server operations fail to prevent data loss
- When working with RecyclerView adapters in Android:
  - Preserve list order stability when updating or filtering items to prevent UI jumping
  - Use flags like preventCategoryChanges to temporarily disable updates during operations
  - Implement comparison methods to avoid unnecessary adapter updates for identical data
  - When handling position-dependent selection, preserve positions during list updates
  - Use notifyItemChanged() for minor updates instead of notifyDataSetChanged() for efficiency
  - Implement proper item comparisons and diffing to determine update strategy
  - Add specialized adapter methods to handle external update requests in a controlled manner
  - Maintain original item order when filtering or applying visibility constraints
  - Implement proper state restoration after operations that might affect item positions
  - Use preventive measures in both the adapter and parent components for consistent UX
- When testing recommendation algorithms:
  - Create realistic test data that mimics actual user behavior patterns
  - Generate different user profiles (casual users, power users, niche interests)
  - Implement a simplified version of recommendation logic for testing purposes
  - Analyze alignment between user preferences and recommendation distribution
  - Calculate similarity scores to evaluate recommendation quality
  - Test edge cases like new users with limited history
  - Consider both quality (relevance) and diversity of recommendations
  - Mock dependencies like caching services when testing in isolation
  - Use interleaving techniques to ensure category diversity in recommendations
  - Evaluate performance across different user types to identify biases
  - Adjust scoring weights based on test results
  - Include comprehensive metrics in test output for analysis

# Scratchpad

## Current Task: Enhance Visibility of Recommended Templates

### Problem Analysis

After examining the RecommendationEngine and related code, I've identified several issues with how recommended templates are displayed:

1. **Poor Visibility of Recommended Templates:**
   - Recommended templates are currently shown with a small badge that doesn't stand out
   - They're mixed in with regular templates without clear visual distinction
   - The "RECOMMENDED" label is too small and can be easily overlooked
   - No additional UI cues to highlight these high-quality recommendations

2. **Implementation Issues:**
   - RecommendationEngine generates quality recommendations but they're lost in the UI
   - Only a small text badge indicates recommended status
   - No special positioning or highlighting in the grid layout
   - Recommended templates should be prioritized in the visual hierarchy

3. **Inconsistent Recommendation Display:**
   - There's a horizontal recommendations section at the top but it's disconnected from the main grid
   - Users might not realize some grid items are also recommended
   - No visual connection between the horizontal carousel and grid recommendations

### Action Plan

[X] 1. Improve the recommended badge in template items:
   - Increase the badge size and visibility
   - Use a more prominent color scheme
   - Add an icon (star or thumbs up) to the badge
   - Make badges more visually striking

[X] 2. Enhance the template item card for recommended templates:
   - Add a subtle colored border or glow effect
   - Use a slightly different background color or gradient
   - Implement a subtle animation or highlight effect
   - Make recommended templates stand out in the grid

[X] 3. Update the TemplateAdapter to prioritize recommended templates:
   - Move recommended templates to the top of the grid
   - Create a visual separator between recommended and regular templates
   - Add a "Recommended for you" header above recommended items in the grid
   - Ensure recommended templates are clearly grouped together

[X] 4. Implement visual indicators in the HomeFragment:
   - Add explanatory text to highlight why items are recommended
   - Create a new section header for recommended items
   - Add a "More recommendations" button at the end of the recommended section
   - Improve user education about the recommendation system

[X] 5. Enhance the recommended templates tracking:
   - Improve analytics for recommended template engagement
   - Track when users interact with recommended vs. regular templates
   - Measure the effectiveness of the new recommendation UI
   - Add feedback mechanism for recommendation quality

### Implementation Completed

1. **Created a dedicated RecommendedTemplateAdapter**
   - Built a specialized adapter for handling templates with section headers
   - Implemented a clean separation between recommended and regular templates
   - Added visual styling for recommended templates with background color changes
   - Improved elevation for recommended templates for better visibility

2. **Enhanced HomeFragment Integration**
   - Updated HomeFragment to use the new RecommendedTemplateAdapter
   - Implemented proper span handling for section headers in the grid
   - Created a better integration with the recommendation engine
   - Added tracking of recommended template IDs for consistent display

3. **Improved Template Item Layout**
   - Added a star icon to the recommended badge for better visibility
   - Created a custom background drawable for the recommended badge
   - Enhanced the badge's layout with icon and text combination
   - Made recommended badge more visually striking

4. **Enhanced Recommendation Tracking**
   - Updated HomeViewModel to track recommended template IDs
   - Added LiveData for recommended template IDs
   - Implemented better integration with the RecommendationEngine
   - Added centralized management of recommended template state

5. **Fixed Technical Issues**
   - Correctly implemented RecyclerView.Adapter for the template adapters
   - Added synchronous template retrieval to the TemplateRepository
   - Created a clean new horizontal template adapter for recommendations
   - Fixed styling issues with the CardView elements

### Next Steps

1. **Testing and Refinement**
   - Test the implementation on various device sizes
   - Evaluate performance on low-end devices
   - Gather user feedback on the new UI
   - Measure engagement metrics for recommended vs regular templates

2. **Additional Enhancements**
   - Consider adding animation effects for recommended templates
   - Implement A/B testing to measure effectiveness of different approaches
   - Add a "show more recommended" option at the end of the recommended section
   - Enhance AI behind recommendations with more personalization

## Fixes for Backend API Errors and Category Order Preservation

### Problem Analysis

After implementing the enhanced recommended templates visibility, we encountered two significant issues:

1. **Missing Backend API Endpoint:**
   - `404 Not Found` error for `/api/users/engagement` endpoint in the backend
   - Error when tracking user engagement with templates
   - Client attempting to sync engagement data to non-existent server endpoint
   - User experience impacted by repeated API failures

2. **Category List Order Changing:**
   - When clicking on categories, their order in the horizontal list changed
   - Inconsistent category positions caused confusion for users
   - Category reordering during loading/pagination operations
   - Poor visual stability in the UI

### Action Plan and Implementation

[X] 1. Fixed Backend API Endpoint Issue:
   - Created the missing `/api/users/engagement` endpoint in the backend
   - Added POST handler to record detailed engagement metrics
   - Implemented batch sync endpoint for efficient processing
   - Added consistent error handling across new endpoints

[X] 2. Enhanced Client-Side Error Handling:
   - Improved EngagementRepository to gracefully handle API errors
   - Implemented SharedPreferences tracking for API failures
   - Added special handling for 404 errors to avoid repeated failures
   - Ensured data is still stored locally even when server sync fails

[X] 3. Fixed Category Order Preservation:
   - Updated CategoriesAdapter to preserve original order when selecting categories
   - Added protection against category list changes during loading operations
   - Improved update logic to avoid unnecessary UI refreshes
   - Implemented stable ordering for categories with proper List handling

[X] 4. Added UI Stability Improvements:
   - Implemented better prevention flags during scrolling and loading
   - Created helper method to detect minor vs major changes to the categories list
   - Enhanced updateSelectedCategory with more robust change handling
   - Added setupLoadingObserver to properly manage loading state and category stability

### Results

1. **Engagement Tracking:**
   - Users can now interact with templates without errors
   - Engagement data is properly tracked both locally and on the server
   - Graceful fallback to local-only tracking when server issues occur
   - Better analytics for measuring recommendation effectiveness

2. **Category UI Stability:**
   - Categories maintain a consistent order throughout the user session
   - Categories don't jump around when selected or during content loading
   - Better visual hierarchy with the "All" category always first
   - Smooth transitions between category selections without jarring reordering

The fixes maintain all the visual enhancements for recommended templates while ensuring a stable and consistent user experience when navigating categories and interacting with templates.

## AdMob Integration Plan with Separate Entry Points

### Overview and Requirements

The task is to implement Google AdMob integration in the EventWish app while ensuring:
1. The integration is separate and doesn't interfere with existing code
2. We create clean entry points for the AdMob functionality
3. We utilize the backend AdMob model and API endpoints
4. We test with backend tokens and app signature verification
5. We follow best practices for mobile ad integration

### Current State Analysis

[X] Analyzed backend AdMob model (`AdMob.js`) that provides:
   - Ad unit management (Banner, Interstitial, Rewarded, Native, App Open, Video)
   - Ad targeting criteria and segmentation
   - Performance metrics tracking (impressions, clicks, CTR)
   - User targeting and customization parameters
   - Device-specific ad delivery rules and cooldowns

[X] Identified existing backend route (`/api/admob`) with endpoints:
   - GET `/units` - Get available ad units for a device
   - GET `/status` - Get ad status and cooldowns for a device
   - POST `/reward` - Handle reward redemption
   - POST `/impression` - Record ad impression
   - POST `/click` - Record ad click

[X] Reviewed existing app architecture:
   - Uses repository pattern and MVVM architecture
   - Has SecureTokenManager for handling API keys and authentication
   - Uses DeviceUtils for device identification and security
   - Has centralized initialization in EventWishApplication

### Implementation Plan

#### 1. Create Core AdMob Classes

[ ] Create AdMob Models
   - Create `AdUnitModel.java` to represent ad units from backend
   - Create `AdResponse.java` for API responses
   - Create `AdStatus.java` for tracking ad status

[ ] Implement AdMob Repository
   - Create `AdMobRepository.java` with methods to interact with backend
   - Add cache layer for offline operation
   - Implement ad request throttling and error handling

[ ] Create AdMob Service Interface
   - Create `AdMobService.java` interface for ad-related operations
   - Add methods for fetching, displaying, and tracking ads
   - Define callback interfaces for ad events

#### 2. Add Network and API Support

[ ] Update ApiService with AdMob Endpoints
   - Add endpoints for `/api/admob/units`, etc.
   - Create request/response models
   - Add proper error handling

[ ] Implement Secure Token Handling for AdMob
   - Use existing SecureTokenManager for storing ad-related tokens
   - Implement device-ad association validation

[ ] Add Proper Signature Verification
   - Implement app signature verification for ad requests
   - Add tamper detection for ad responses

#### 3. Create AdMob Manager

[ ] Implement AdMobManager as Singleton
   - Create `AdMobManager.java` as the main entry point
   - Add initialization in a way that doesn't affect current app flow
   - Implement lazy loading of Google Mobile Ads SDK

[ ] Add AdMob Configuration
   - Create `AdConfig.java` for storing configuration
   - Add test/production mode toggle
   - Implement ad frequency capping

[ ] Implement Specialized Ad Type Managers
   - Create `BannerAdManager.java` for banner ads
   - Create `InterstitialAdManager.java` for interstitial ads
   - Create `RewardedAdManager.java` for rewarded ads

#### 4. Create UI Components

[ ] Add AdMob UI Components
   - Create `AdBannerView.java` custom view for banner ads
   - Create layout files for different ad formats
   - Implement placeholder views for ad loading states

[ ] Design Ad Integration Points
   - Create adapter for RecyclerView with ad items
   - Add fragment for displaying interstitial ads
   - Implement dialog for rewarded ads

#### 5. Testing Infrastructure

[ ] Create Test Mode with Test Ads
   - Implement test ad ID handling
   - Add debug logging for ad operations
   - Create mock responses for offline testing

[ ] Add Analytics and Reporting
   - Track ad performance metrics
   - Log errors and user interactions
   - Create dashboard for ad performance

### Implementation Approach

1. **Isolation Strategy**: All AdMob code will be in a separate `ads` package to maintain clean separation
2. **Lazy Initialization**: AdMob SDK will only be initialized if ads are used
3. **Feature Flags**: Add configuration to enable/disable ads completely
4. **Graceful Degradation**: App will function normally even if ad services fail
5. **Testing Support**: Include test ad IDs and mock responses for development

### Integration Test Plan

[ ] Test Backend API Integration
   - Verify backend endpoints are accessible
   - Test token and signature verification
   - Validate response parsing

[ ] Test Ad Display Functionality
   - Verify ads load and display correctly
   - Test ad lifecycle events (load, show, click, close)
   - Validate error handling

[ ] Performance Testing
   - Measure impact on app startup time
   - Monitor memory usage with ads
   - Test battery consumption

### First Milestone: Backend Communication

Our first goal is to establish communication with the backend AdMob endpoints:

1. Create the models and repository
2. Add API endpoints to ApiService
3. Implement test/dev mode
4. Create minimal AdMobManager for verification
5. Test with backend token validation

This approach ensures we can build a robust AdMob integration without disrupting existing code, while maintaining clean architecture and separation of concerns.