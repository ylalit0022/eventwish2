# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- When implementing Firebase services in Android:
  - Ensure the package name in google-services.json matches the application's package name
  - Only get AppExecutors via getInstance() as it uses the singleton pattern
  - Correctly initialize Firebase services in the Application.onCreate() method
  - Follow existing patterns for initialization: call init() first, then getInstance()
  - Use proper error handling when initializing Firebase services
  - Initialize services in the correct order: AppExecutors first, then core services, then Firebase
  - Add device information as custom properties for better analytics and crash reporting
  - Initialize Firebase Analytics before Performance Monitoring and Crashlytics for proper integration
  - For better performance diagnostics, use traces for important user flows and app operations
  - When updating Google services, watch for version compatibility issues between SDK XML versions

# Scratchpad

## Firebase Analytics, Crashlytics, and Performance Monitoring Implementation - COMPLETED

### Current State Analysis
- Project has a google-services.json file but Firebase dependencies are not yet integrated
- AnalyticsUtils class exists but only logs to LogCat without actual analytics
- App structure has an Application class (EventWishApplication) for initializing services
- App has ad implementation and various repositories already set up

### Implementation Plan - âœ… COMPLETED

1. [X] Configure Firebase in Build Files
   - [X] Add Firebase BOM to project dependencies
   - [X] Add Google services plugin to app build.gradle
   - [X] Add Firebase Analytics dependency
   - [X] Add Firebase Crashlytics plugin and dependency
   - [X] Add Firebase Performance Monitoring dependency
   - [X] Ensure google-services.json is properly configured

2. [X] Enhance AnalyticsUtils with Firebase
   - [X] Initialize Firebase Analytics in AnalyticsUtils
   - [X] Update existing tracking methods to use Firebase Analytics
   - [X] Add new methods for tracking key events with appropriate parameters
   - [X] Implement setUserProperties for enhanced analytics filtering
   - [X] Add screen tracking capabilities

3. [X] Configure Crashlytics
   - [X] Initialize Crashlytics in EventWishApplication
   - [X] Add custom keys for better crash reporting
   - [X] Implement proper exception handling with Crashlytics.logException
   - [X] Create test crash mechanism (optional, for verification)
   - [X] Add non-fatal exception reporting for key errors

4. [X] Configure Performance Monitoring
   - [X] Initialize Performance Monitoring in EventWishApplication
   - [X] Add trace tracking for key app operations
   - [X] Instrument network requests for performance monitoring
   - [X] Add custom metrics for important user flows
   - [X] Set up screen rendering performance tracking

5. [X] Add Key Events to Track
   - [X] App start and app update events
   - [X] User registration and login events
   - [X] Content view and interaction events
   - [X] Feature usage events
   - [X] Conversion events
   - [X] App crashes and ANRs (automatic)

6. [X] Add User Properties
   - [X] User type/category
   - [X] App version
   - [X] Device information
   - [X] User preferences
   - [X] Usage patterns

7. [X] Update Documentation
   - [X] Document Firebase integration in code
   - [X] Document key events and parameters in code
   - [X] Document user properties in code
   - [X] Document performance metrics in code

8. [X] Testing and Verification
   - [X] Verify Firebase Console integration ready
   - [X] Test analytics events in debug mode ready
   - [X] Test crash reporting ready
   - [X] Test performance monitoring ready
   - [X] Validate user properties ready
   - [X] Successful build verification

### Implementation Summary

The Firebase Analytics, Crashlytics, and Performance Monitoring implementation is now complete and the build is successful. The following components have been created:

1. **AnalyticsUtils**: Enhanced to use Firebase Analytics instead of just logging to LogCat. Added methods for tracking various events and user properties.

2. **FirebaseCrashManager**: New utility class for Firebase Crashlytics integration. Provides methods for logging exceptions, setting custom keys, and configuring crash reporting.

3. **PerformanceTracker**: New utility class for Firebase Performance Monitoring. Provides methods for tracking app performance, including traces and HTTP metrics.

4. **EventWishApplication**: Updated to initialize Firebase services and set initial user properties.

5. **MainActivity**: Updated to demonstrate tracking user actions with Firebase Analytics, including app startup, search, and template viewing.

### Fixed Issues
- Updated package name in google-services.json to match app's package name
- Fixed initialization methods for DeviceUtils and CacheManager
- Fixed method signatures to match existing APIs
- Fixed constructor calls for repositories to use static getInstance methods

### Next Steps

1. Monitor Firebase Console to verify data collection
2. Add more specific event tracking to key user journeys
3. Configure Firebase Console dashboards for better analytics visualization
4. Set up alerts for critical crash patterns
5. Review performance metrics to identify areas for optimization