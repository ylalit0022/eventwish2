rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isValidFcmToken(token) {
      return token is string && token.size() >= 20;  // FCM tokens are typically very long
    }

    function hasValidToken(userId) {
      return isValidFcmToken(userId);
    }

    // Template rules
    match /templates/{templateId} {
      // Allow read for all templates
      allow read: if true;
      
      // Allow create with initial data
      allow create: if request.resource.data.keys().hasAll(['likeCount', 'favoriteCount', 'createdAt', 'updatedAt'])
        && request.resource.data.likeCount == 0
        && request.resource.data.favoriteCount == 0;

      // Allow updates from users with valid FCM token
      allow update: if hasValidToken(request.resource.data.userId)
        && (
          // Check that only allowed fields are being updated
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'favoriteCount', 'updatedAt', 'userId'])
          // Ensure counts are valid numbers
          && (request.resource.data.likeCount is number)
          && (request.resource.data.favoriteCount is number)
          // Ensure counts are non-negative
          && (request.resource.data.likeCount >= 0)
          && (request.resource.data.favoriteCount >= 0)
        );
    }

    // User rules based on FCM token
    match /users/{userId} {
      allow read, write: if hasValidToken(userId);

      // Likes collection - separate rules
      match /likes/{templateId} {
        allow read: if hasValidToken(userId);
        allow create: if hasValidToken(userId)
          && request.resource.data.userId == userId
          && request.resource.data.templateId == templateId
          && request.resource.data.timestamp is timestamp;
        allow delete: if hasValidToken(userId);
      }

      // Favorites collection - separate rules
      match /favorites/{templateId} {
        allow read: if hasValidToken(userId);
        allow create: if hasValidToken(userId)
          && request.resource.data.userId == userId
          && request.resource.data.templateId == templateId
          && request.resource.data.timestamp is timestamp;
        allow delete: if hasValidToken(userId);
      }
    }
  }
} 