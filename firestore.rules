rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function hasValidFcmToken() {
      return request.auth.token.fcm != null;
    }
    
    function isOwnerByFcmToken(userId) {
      return hasValidFcmToken() && (
        exists(/databases/$(database)/documents/users/$(userId)) && 
        get(/databases/$(database)/documents/users/$(userId)).data.fcmToken == request.auth.token.fcm
      );
    }
    
    function isOwnerByAuth(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isOwner(userId) {
      return isOwnerByAuth(userId) || isOwnerByFcmToken(userId);
    }

    // User document rules
    match /users/{userId} {
      // Allow read/write for FCM token queries
      allow read: if isSignedIn() || hasValidFcmToken();
      
      // Allow create with FCM token
      allow create: if hasValidFcmToken() && 
        request.resource.data.fcmToken == request.auth.token.fcm;
      
      // Allow update if owner or has matching FCM token
      allow update: if isOwner(userId) || (
        hasValidFcmToken() && 
        (resource.data.fcmToken == request.auth.token.fcm || 
         request.resource.data.fcmToken == request.auth.token.fcm)
      );
      
      // Allow delete only by owner
      allow delete: if isOwner(userId);

      // User preferences subcollection
      match /preferences/{prefId} {
        allow read, write: if isOwner(userId);
      }

      // Favorites subcollection
      match /favorites/{templateId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId)
          && hasValidFields(['templateId', 'timestamp']);
        allow delete: if isOwner(userId);
      }

      // Likes subcollection
      match /likes/{templateId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId)
          && hasValidFields(['templateId', 'timestamp']);
        allow delete: if isOwner(userId);
      }

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && hasValidFields(['title', 'body', 'timestamp', 'read']);
        allow update: if isOwner(userId)
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'lastUpdated']);
        allow delete: if isOwner(userId);
      }
    }

    // Template rules
    match /templates/{templateId} {
      // Allow read for all users
      allow read: if true;
      
      // Allow update for like/favorite counts
      allow update: if isSignedIn() || hasValidFcmToken();
      
      // Prevent deletion by regular users
      allow delete: if false;
    }

    // Migration rules (temporary, remove after migration)
    match /users/{oldToken} {
      allow read: if isSignedIn() 
        && (resource.data.fcmToken == request.auth.token.fcm 
            || resource.data.fcmToken == null);
      allow delete: if isSignedIn() 
        && resource.data.fcmToken == request.auth.token.fcm;
    }
  }
} 