rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider != 'anonymous';
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isValidUserData() {
      let validFields = [
        'email', 'name', 'isOnline', 'lastLogin', 'lastUpdated',
        'notificationPreferences', 'favoriteTemplates', 'likedTemplates'
      ];
      return request.resource.data.keys().hasOnly(validFields);
    }

    function isValidTemplateData() {
      let allowedFields = ['likeCount', 'favoriteCount', 'lastUpdated'];
      return request.resource.data.keys().hasAll(['likeCount', 'favoriteCount', 'lastUpdated'])
        && request.resource.data.keys().hasOnly(allowedFields);
    }

    function isValidTemplateUpdate() {
      let allowedFields = ['likeCount', 'favoriteCount', 'lastUpdated'];
      let diff = request.resource.data.diff(resource.data);
      return diff.changedKeys().hasOnly(allowedFields);
    }

    // User document rules
    match /users/{userId} {
      // Allow read/write for authenticated users
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
      
      // Allow create with Google Sign-In
      allow create: if isSignedIn() && request.auth.uid == userId && isValidUserData();
      
      // Allow update if owner and valid data
      allow update: if isOwner(userId) && isValidUserData();
      
      // Allow delete only by owner
      allow delete: if isOwner(userId);

      // User preferences subcollection
      match /preferences/{prefId} {
        allow read, write: if isOwner(userId);
      }

      // Likes subcollection
      match /likes/{templateId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }
      
      // Favorites subcollection
      match /favorites/{templateId} {
        allow read: if isSignedIn();
        allow write: if isOwner(userId);
      }

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId)
          && request.resource.data.keys().hasOnly(['title', 'body', 'timestamp', 'read'])
          && request.resource.data.timestamp is timestamp;
        allow update: if isOwner(userId)
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'lastUpdated']);
        allow delete: if isOwner(userId);
      }
    }

    // Templates collection
    match /templates/{templateId} {
      allow read: if isSignedIn();
      
      // Allow create with initial stats
      allow create: if isSignedIn() 
        && request.resource.data.keys().hasAll(['id', 'likeCount', 'favoriteCount', 'lastUpdated'])
        && request.resource.data.id is string
        && request.resource.data.likeCount == 0
        && request.resource.data.favoriteCount == 0
        && request.resource.data.lastUpdated is timestamp;
      
      // Allow updates to like/favorite counts
      allow update: if isSignedIn()
        && request.resource.data.keys().hasAll(['id', 'likeCount', 'favoriteCount', 'lastUpdated'])
        && request.resource.data.id == resource.data.id
        && abs(request.resource.data.likeCount - resource.data.likeCount) <= 1
        && abs(request.resource.data.favoriteCount - resource.data.favoriteCount) <= 1
        && request.resource.data.lastUpdated is timestamp;
    }

    // User likes collection
    match /user_likes/{likeId} {
      allow read: if isSignedIn();
      allow create, delete: if isSignedIn() && 
        request.auth.uid == likeId.split('_')[0];
    }

    // User favorites collection
    match /user_favorites/{favoriteId} {
      allow read: if isSignedIn();
      allow create, delete: if isSignedIn() && 
        request.auth.uid == favoriteId.split('_')[0];
    }
  }
} 